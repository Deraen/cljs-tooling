{:cljs.analyzer/namespaces {cljs.core.async.impl.ioc-helpers {:use-macros nil, :requires {cljs.core.async.impl.protocols cljs.core.async.impl.protocols, impl cljs.core.async.impl.protocols}, :name cljs.core.async.impl.ioc-helpers, :defs {VALUE-IDX {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs", :column 1, :line 7, :const true, :name cljs.core.async.impl.ioc-helpers/VALUE-IDX}, map->ExceptionFrame {:arglists (quote ([G__13140])), :name cljs.core.async.impl.ioc-helpers/map->ExceptionFrame, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.ioc-helpers/ExceptionFrame, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 78, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, t13105 {:column 3, :line 27, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs", :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core.async.impl.protocols/Handler}, :num-fields 3, :type true, :name cljs.core.async.impl.ioc-helpers/t13105}, run-state-machine {:arglists (quote ([state])), :name cljs.core.async.impl.ioc-helpers/run-state-machine, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 33, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, t13108 {:column 3, :line 27, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs", :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core.async.impl.protocols/Handler}, :num-fields 3, :type true, :name cljs.core.async.impl.ioc-helpers/t13108}, return-chan {:arglists (quote ([state value])), :name cljs.core.async.impl.ioc-helpers/return-chan, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag not-native, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 71, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, process-exception {:arglists (quote ([state])), :name cljs.core.async.impl.ioc-helpers/process-exception, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 93, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, ioc-alts! {:arglists (quote ([state cont-block ports & {:as opts}])), :name cljs.core.async.impl.ioc-helpers/ioc-alts!, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{cljs.core/Keyword clj-nil}, :variadic true, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic true, :line 60, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, ExceptionFrame {:column 12, :line 78, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs", :protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/ICounted cljs.core/IRecord cljs.core/IAssociative cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/IMap cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 5, :type true, :name cljs.core.async.impl.ioc-helpers/ExceptionFrame}, FN-IDX {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs", :column 1, :line 5, :const true, :name cljs.core.async.impl.ioc-helpers/FN-IDX}, put! {:arglists (quote ([state blk c val])), :name cljs.core.async.impl.ioc-helpers/put!, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{cljs.core/Keyword clj-nil}, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 52, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, aset-object {:arglists (quote ([arr idx o])), :name cljs.core.async.impl.ioc-helpers/aset-object, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 13, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, STATE-IDX {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs", :column 1, :line 6, :const true, :name cljs.core.async.impl.ioc-helpers/STATE-IDX}, add-exception-frame {:arglists (quote ([state catch-block catch-exception finally-block continue-block])), :name cljs.core.async.impl.ioc-helpers/add-exception-frame, :protocol-impl nil, :max-fixed-arity 5, :methods ({:variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 84, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, ->t13108 {:arglists (quote ([f fn-handler meta13109])), :name cljs.core.async.impl.ioc-helpers/->t13108, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.ioc-helpers/t13108, :variadic false, :max-fixed-arity 3}), :column 3, :protocol-inline nil, :variadic false, :line 27, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, ->t13105 {:arglists (quote ([f fn-handler meta13106])), :name cljs.core.async.impl.ioc-helpers/->t13105, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.ioc-helpers/t13105, :variadic false, :max-fixed-arity 3}), :column 3, :protocol-inline nil, :variadic false, :line 27, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, USER-START-IDX {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs", :column 1, :line 11, :const true, :name cljs.core.async.impl.ioc-helpers/USER-START-IDX}, take! {:arglists (quote ([state blk c])), :name cljs.core.async.impl.ioc-helpers/take!, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{cljs.core/Keyword clj-nil}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 43, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, BINDINGS-IDX {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs", :column 1, :line 8, :const true, :name cljs.core.async.impl.ioc-helpers/BINDINGS-IDX}, fn-handler {:arglists (quote ([f])), :name cljs.core.async.impl.ioc-helpers/fn-handler, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.ioc-helpers/t13108, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 25, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, aget-object {:arglists (quote ([arr idx])), :name cljs.core.async.impl.ioc-helpers/aget-object, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 16, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, finished? {:arglists (quote ([state-array])), :name cljs.core.async.impl.ioc-helpers/finished?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns true if the machine is in a finished state", :line 20, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, run-state-machine-wrapped {:arglists (quote ([state])), :name cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 36, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, ->ExceptionFrame {:arglists (quote ([catch-block catch-exception finally-block continue-block prev])), :name cljs.core.async.impl.ioc-helpers/->ExceptionFrame, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core.async.impl.ioc-helpers/ExceptionFrame, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 78, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs"}, CURRENT-EXCEPTION {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs", :column 1, :line 10, :const true, :name cljs.core.async.impl.ioc-helpers/CURRENT-EXCEPTION}, EXCEPTION-FRAMES {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/ioc_helpers.cljs", :column 1, :line 9, :const true, :name cljs.core.async.impl.ioc-helpers/EXCEPTION-FRAMES}}, :require-macros {cljs.core.async.impl.ioc-macros cljs.core.async.impl.ioc-macros, ioc cljs.core.async.impl.ioc-macros}, :excludes #{}, :imports nil, :doc nil, :uses nil}, cljs-app.view {:use-macros {go cljs.core.async.macros}, :requires {string clojure.string, clojure.string clojure.string, cljs.core.async cljs.core.async, dom om.dom, om.dom om.dom, om.core om.core, om om.core}, :name cljs-app.view, :defs {app {:arglists (quote ([data owner])), :name cljs-app.view/app, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs-app.view/t9377, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 19, :fn-var true, :file "src-cljs/cljs_app/view.cljs"}, mtgox-ticker {:arglists (quote ([data owner chans])), :name cljs-app.view/mtgox-ticker, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs-app.view/t9371, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 10, :fn-var true, :file "src-cljs/cljs_app/view.cljs"}, ->t9377 {:arglists (quote ([owner data app meta9378])), :name cljs-app.view/->t9377, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs-app.view/t9377, :variadic false, :max-fixed-arity 4}), :column 3, :protocol-inline nil, :variadic false, :line 20, :fn-var true, :file "src-cljs/cljs_app/view.cljs"}, ->t9374 {:arglists (quote ([owner data app meta9375])), :name cljs-app.view/->t9374, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs-app.view/t9374, :variadic false, :max-fixed-arity 4}), :column 3, :protocol-inline nil, :variadic false, :line 20, :fn-var true, :file "src-cljs/cljs_app/view.cljs"}, ->t9368 {:arglists (quote ([chans owner data mtgox-ticker meta9369])), :name cljs-app.view/->t9368, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs-app.view/t9368, :variadic false, :max-fixed-arity 5}), :column 3, :protocol-inline nil, :variadic false, :line 11, :fn-var true, :file "src-cljs/cljs_app/view.cljs"}, app-state {:file "src-cljs/cljs_app/view.cljs", :column 1, :line 15, :name cljs-app.view/app-state}, t9374 {:column 3, :line 20, :file "src-cljs/cljs_app/view.cljs", :protocols #{cljs.core/IMeta om.core/IRender om.core/IInitState cljs.core/IWithMeta}, :num-fields 4, :type true, :name cljs-app.view/t9374}, ->t9371 {:arglists (quote ([chans owner data mtgox-ticker meta9372])), :name cljs-app.view/->t9371, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs-app.view/t9371, :variadic false, :max-fixed-arity 5}), :column 3, :protocol-inline nil, :variadic false, :line 11, :fn-var true, :file "src-cljs/cljs_app/view.cljs"}, t9377 {:column 3, :line 20, :file "src-cljs/cljs_app/view.cljs", :protocols #{cljs.core/IMeta om.core/IRender om.core/IInitState cljs.core/IWithMeta}, :num-fields 4, :type true, :name cljs-app.view/t9377}, t9371 {:column 3, :line 11, :file "src-cljs/cljs_app/view.cljs", :protocols #{cljs.core/IMeta om.core/IRender cljs.core/IWithMeta}, :num-fields 5, :type true, :name cljs-app.view/t9371}, t9368 {:column 3, :line 11, :file "src-cljs/cljs_app/view.cljs", :protocols #{cljs.core/IMeta om.core/IRender cljs.core/IWithMeta}, :num-fields 5, :type true, :name cljs-app.view/t9368}}, :require-macros {dom om.dom, om.dom om.dom, om om.core, om.core om.core, cljs.core.async.macros cljs.core.async.macros}, :excludes #{}, :imports nil, :doc nil, :uses {put! cljs.core.async, sliding-buffer cljs.core.async, <! cljs.core.async, chan cljs.core.async}}, cljs.core.async.impl.buffers {:use-macros nil, :requires {cljs.core.async.impl.protocols cljs.core.async.impl.protocols, impl cljs.core.async.impl.protocols}, :name cljs.core.async.impl.buffers, :defs {DroppingBuffer {:column 10, :line 96, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs", :protocols #{cljs.core.async.impl.protocols/Buffer cljs.core/ICounted cljs.core.async.impl.protocols/UnblockingBuffer}, :num-fields 2, :type true, :name cljs.core.async.impl.buffers/DroppingBuffer}, ->RingBuffer {:arglists (quote ([head tail length arr])), :name cljs.core.async.impl.buffers/->RingBuffer, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async.impl.buffers/RingBuffer, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 23, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs"}, ring-buffer {:arglists (quote ([n])), :name cljs.core.async.impl.buffers/ring-buffer, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.buffers/RingBuffer, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 74, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs"}, dropping-buffer {:arglists (quote ([n])), :name cljs.core.async.impl.buffers/dropping-buffer, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.buffers/DroppingBuffer, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 110, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs"}, ->SlidingBuffer {:arglists (quote ([buf n])), :name cljs.core.async.impl.buffers/->SlidingBuffer, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async.impl.buffers/SlidingBuffer, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 113, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs"}, ->DroppingBuffer {:arglists (quote ([buf n])), :name cljs.core.async.impl.buffers/->DroppingBuffer, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async.impl.buffers/DroppingBuffer, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 96, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs"}, FixedBuffer {:column 10, :line 80, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs", :protocols #{cljs.core.async.impl.protocols/Buffer cljs.core/ICounted}, :num-fields 2, :type true, :name cljs.core.async.impl.buffers/FixedBuffer}, ->FixedBuffer {:arglists (quote ([buf n])), :name cljs.core.async.impl.buffers/->FixedBuffer, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async.impl.buffers/FixedBuffer, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 80, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs"}, RingBuffer {:column 10, :line 23, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs", :protocols #{cljs.core.async.impl.buffers/Object}, :num-fields 4, :type true, :name cljs.core.async.impl.buffers/RingBuffer}, sliding-buffer {:arglists (quote ([n])), :name cljs.core.async.impl.buffers/sliding-buffer, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.buffers/SlidingBuffer, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 128, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs"}, acopy {:arglists (quote ([src src-start dest dest-start len])), :name cljs.core.async.impl.buffers/acopy, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 15, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs"}, SlidingBuffer {:column 10, :line 113, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs", :protocols #{cljs.core.async.impl.protocols/Buffer cljs.core/ICounted cljs.core.async.impl.protocols/UnblockingBuffer}, :num-fields 2, :type true, :name cljs.core.async.impl.buffers/SlidingBuffer}, fixed-buffer {:arglists (quote ([n])), :name cljs.core.async.impl.buffers/fixed-buffer, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.buffers/FixedBuffer, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 93, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/buffers.cljs"}}, :require-macros nil, :excludes #{}, :imports nil, :doc nil, :uses nil}, cljs-app.node-bits {:use-macros {new-obj cljs-app.macros, when-node cljs-app.macros}, :requires nil, :name cljs-app.node-bits, :defs {window {:file "src-cljs/cljs_app/node_bits.cljs", :column 2, :line 38, :name cljs-app.node-bits/window}, system-tray {:arglists (quote ([title & menu-items])), :name cljs-app.node-bits/system-tray, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag obj__3283__auto__, :variadic true, :max-fixed-arity 1}), :column 2, :protocol-inline nil, :variadic true, :line 22, :fn-var true, :file "src-cljs/cljs_app/node_bits.cljs"}, ->Menu {:arglists (quote ([])), :name cljs-app.node-bits/->Menu, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag obj__3283__auto__, :variadic false, :max-fixed-arity 0}), :column 2, :protocol-inline nil, :variadic false, :line 20, :fn-var true, :file "src-cljs/cljs_app/node_bits.cljs"}, ->MenuItem {:arglists (quote ([opts])), :name cljs-app.node-bits/->MenuItem, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag obj__3283__auto__, :variadic false, :max-fixed-arity 1}), :column 2, :protocol-inline nil, :variadic false, :line 16, :fn-var true, :file "src-cljs/cljs_app/node_bits.cljs"}, ->Tray {:arglists (quote ([menu opts])), :name cljs-app.node-bits/->Tray, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag obj__3283__auto__, :variadic false, :max-fixed-arity 2}), :column 2, :protocol-inline nil, :variadic false, :line 10, :fn-var true, :file "src-cljs/cljs_app/node_bits.cljs"}, gui {:file "src-cljs/cljs_app/node_bits.cljs", :column 2, :line 8, :name cljs-app.node-bits/gui}, node-require {:file "src-cljs/cljs_app/node_bits.cljs", :column 2, :line 6, :name cljs-app.node-bits/node-require}}, :require-macros {cljs-app.macros cljs-app.macros, ms cljs-app.macros}, :excludes #{}, :imports nil, :doc nil, :uses nil}, cljs.core {:use-macros nil, :requires {garray goog.array, goog.array goog.array, gobject goog.object, goog.object goog.object, gstringbuf goog.string.StringBuffer, goog.string.StringBuffer goog.string.StringBuffer, goog.string goog.string, gstring goog.string}, :name cljs.core, :defs {sorted-map {:arglists (quote ([& keyvals])), :name cljs.core/sorted-map, :protocol-impl nil, :max-fixed-arity 0, :methods ({:variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :line 5921, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, re-pattern {:arglists (quote ([s])), :name cljs.core/re-pattern, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag js/RegExp, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns an instance of RegExp which has compiled the provided string.", :line 6692, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, keyword? {:arglists (quote ([x])), :name cljs.core/keyword?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 2108, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, unchecked-inc-int {:arglists (quote ([x])), :name cljs.core/unchecked-inc-int, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1591, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, val {:arglists (quote ([map-entry])), :name cljs.core/val, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the value in the map entry.", :line 6063, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -key->js {:arglists (quote ([x])), :protocol cljs.core/IEncodeJS, :name cljs.core/-key->js, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 7219, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, t9562 {:column 7, :line 1033, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IFn cljs.core/Fn cljs.core/IWithMeta}, :num-fields 4, :type true, :name cljs.core/t9562}, chunked-seq? {:arglists (quote ([x])), :name cljs.core/chunked-seq?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 1166, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, ->VectorNode {:arglists (quote ([edit arr])), :name cljs.core/->VectorNode, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/VectorNode, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 3176, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, equiv-sequential {:arglists (quote ([x y])), :name cljs.core/equiv-sequential, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :line 1819, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pop-tail {:arglists (quote ([pv level node])), :name cljs.core/pop-tail, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{cljs.core/VectorNode clj-nil}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3247, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, *main-cli-fn* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 121, :doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :name cljs.core/*main-cli-fn*}, object-array {:arglists (quote ([size-or-seq] [size init-val-or-seq])), :name cljs.core/object-array, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag array, :variadic false, :max-fixed-arity 1} {:tag array, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 2420, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pr-sequential-writer {:arglists (quote ([writer print-one begin sep end opts coll])), :name cljs.core/pr-sequential-writer, :protocol-impl nil, :max-fixed-arity 7, :methods ({:variadic false, :max-fixed-arity 7}), :column 1, :protocol-inline nil, :variadic false, :line 6700, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->ObjMap {:arglists (quote ([meta keys strobj update-count __hash])), :name cljs.core/->ObjMap, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/ObjMap, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 3971, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, max-key {:arglists (quote ([k x] [k x y] [k x y & more])), :name cljs.core/max-key, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3} {:tag #{nil any}, :variadic true, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns the x for which (k x), a number, is greatest.", :line 6395, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, hash-coll {:arglists (quote ([coll])), :name cljs.core/hash-coll, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil number any}, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 1837, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, list* {:arglists (quote ([args] [a args] [a b args] [a b c args] [a b c d & more])), :name cljs.core/list*, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag seq, :variadic false, :max-fixed-arity 1} {:tag cljs.core/Cons, :variadic false, :max-fixed-arity 2} {:tag cljs.core/Cons, :variadic false, :max-fixed-arity 3} {:tag cljs.core/Cons, :variadic false, :max-fixed-arity 4} {:tag cljs.core/Cons, :variadic true, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic true, :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :line 2481, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IEditableCollection {:impls #{cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/PersistentVector cljs.core/PersistentHashMap cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 344, :protocol-symbol true, :name cljs.core/IEditableCollection}, -contains-key? {:arglists (quote ([coll k])), :protocol cljs.core/IAssociative, :name cljs.core/-contains-key?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 256, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, pr-seq-writer {:arglists (quote ([objs writer opts])), :name cljs.core/pr-seq-writer, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 6819, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, booleans {:arglists (quote ([x])), :name cljs.core/booleans, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1658, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, == {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/==, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1} {:tag boolean, :variadic false, :max-fixed-arity 2} {:tag boolean, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic true, :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :line 1761, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, chunk-buffer {:arglists (quote ([capacity])), :name cljs.core/chunk-buffer, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/ChunkBuffer, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 2220, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -entry-key {:arglists (quote ([coll entry])), :protocol cljs.core/ISorted, :name cljs.core/-entry-key, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 318, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -next {:arglists (quote ([coll])), :protocol cljs.core/INext, :name cljs.core/-next, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag clj-or-nil, :variadic false, :line 250, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj-or-nil}, array-map-index-of {:arglists (quote ([m k])), :name cljs.core/array-map-index-of, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4127, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, longs {:arglists (quote ([x])), :name cljs.core/longs, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1665, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, TransientArrayMap {:protocols #{cljs.core/ICounted cljs.core/ITransientMap cljs.core/ITransientAssociative cljs.core/ITransientCollection cljs.core/ILookup}, :num-fields 3, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 4340, :declared true, :name cljs.core/TransientArrayMap}, shorts {:arglists (quote ([x])), :name cljs.core/shorts, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1661, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IHash {:impls #{cljs.core/PersistentQueue cljs.core/PersistentArrayMap cljs.core/Atom cljs.core/EmptyList cljs.core/ValSeq cljs.core/MultiFn cljs.core/Subvec cljs.core/Range default cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueueSeq cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/RedNode cljs.core/ChunkedCons cljs.core/Keyword cljs.core/ObjMap cljs.core/PersistentVector cljs.core/ArrayNodeSeq cljs.core/RSeq cljs.core/PersistentTreeSet cljs.core/LazySeq cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/NodeSeq cljs.core/Cons cljs.core/UUID cljs.core/PersistentTreeMapSeq cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/Symbol cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/List cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 300, :protocol-symbol true, :name cljs.core/IHash}, array->transient-hash-map {:arglists (quote ([len arr])), :name cljs.core/array->transient-hash-map, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4410, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, instance? {:arglists (quote ([t o])), :name cljs.core/instance?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 402, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, -flush {:arglists (quote ([writer])), :protocol cljs.core/IWriter, :name cljs.core/-flush, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 324, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->ArrayNode {:arglists (quote ([edit cnt arr])), :name cljs.core/->ArrayNode, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/ArrayNode, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 4693, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, tv-editable-root {:arglists (quote ([node])), :name cljs.core/tv-editable-root, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/VectorNode, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3635, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->Reduced {:arglists (quote ([val])), :name cljs.core/->Reduced, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/Reduced, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 583, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pr-str-with-opts {:arglists (quote ([objs opts])), :name cljs.core/pr-str-with-opts, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil string}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :line 6832, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, prn-str-with-opts {:arglists (quote ([objs opts])), :name cljs.core/prn-str-with-opts, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil string}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Same as pr-str-with-opts followed by (newline)", :line 6840, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, sequential? {:arglists (quote ([x])), :name cljs.core/sequential?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if coll satisfies ISequential", :line 1141, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, fn? {:arglists (quote ([f])), :name cljs.core/fn?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 1024, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, empty {:arglists (quote ([coll])), :name cljs.core/empty, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns an empty collection of the same category as coll, or nil", :line 843, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, TransientVector {:protocols #{cljs.core/IFn cljs.core/IIndexed cljs.core/ICounted cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ITransientCollection cljs.core/ILookup}, :num-fields 4, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 3687, :declared true, :name cljs.core/TransientVector}, dorun {:arglists (quote ([coll] [n coll])), :name cljs.core/dorun, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1} {:tag clj-nil, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :line 6630, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->t9556 {:arglists (quote ([meta o with-meta meta9557])), :name cljs.core/->t9556, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/t9556, :variadic false, :max-fixed-arity 4}), :column 7, :protocol-inline nil, :variadic false, :line 1033, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, remove-method {:arglists (quote ([multifn dispatch-val])), :name cljs.core/remove-method, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Removes the method of multimethod associated with dispatch-value.", :line 7598, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, KeySeq {:column 10, :line 5940, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/INext cljs.core/IReduce cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 2, :type true, :name cljs.core/KeySeq}, gensym {:arglists (quote ([] [prefix-string])), :name cljs.core/gensym, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil cljs.core/Symbol}, :variadic false, :max-fixed-arity 0} {:tag #{nil cljs.core/Symbol}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :line 7174, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, not= {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/not=, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1} {:tag boolean, :variadic false, :max-fixed-arity 2} {:tag boolean, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic true, :doc "Same as (not (= obj1 obj2))", :line 2587, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, *3 {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 65, :doc "bound in a repl thread to the third most recent value printed", :name cljs.core/*3}, ->PersistentQueue {:arglists (quote ([meta count front rear __hash])), :name cljs.core/->PersistentQueue, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/PersistentQueue, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 3851, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, Keyword {:protocols #{cljs.core/INamed cljs.core/ICloneable cljs.core/IFn cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IPrintWithWriter}, :num-fields 4, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 2073, :declared true, :name cljs.core/Keyword}, -namespace {:arglists (quote ([x])), :protocol cljs.core/INamed, :name cljs.core/-namespace, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag string, :variadic false, :line 377, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag string}, unchecked-multiply {:arglists (quote ([] [x] [x y] [x y & more])), :name cljs.core/unchecked-multiply, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 0} {:variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "Returns the product of nums. (*) returns 1.", :line 1594, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, bit-or {:arglists (quote ([x y])), :name cljs.core/bit-or, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Bitwise or", :line 1706, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, hash-set {:arglists (quote ([] [& keys])), :name cljs.core/hash-set, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag cljs.core/ISet, :variadic false, :max-fixed-arity 0} {:tag clj, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :line 6324, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ILookup {:impls #{cljs.core/PersistentArrayMap cljs.core/Subvec om.core/MapCursor cljs.core/TransientArrayMap cljs.core/TransientVector cljs.core/RedNode om.core/IndexedCursor cljs.core/ObjMap cljs.core/PersistentVector cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/TransientHashMap cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/PersistentTreeMap cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 253, :protocol-symbol true, :name cljs.core/ILookup}, -first {:arglists (quote ([coll])), :protocol cljs.core/ISeq, :name cljs.core/-first, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 246, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, fixture2 {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 7187, :name cljs.core/fixture2}, add-watch {:arglists (quote ([iref key f])), :name cljs.core/add-watch, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :line 7139, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-dec {:arglists (quote ([x])), :name cljs.core/unchecked-dec, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1575, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, some {:arglists (quote ([pred coll])), :name cljs.core/some, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{clj-nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :line 2612, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, nil? {:arglists (quote ([x])), :name cljs.core/nil?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if x is nil, false otherwise.", :line 83, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, push-tail {:arglists (quote ([pv level parent tailnode])), :name cljs.core/push-tail, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/VectorNode, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3206, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IndexedSeq {:protocols #{cljs.core/ICloneable cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IIndexed cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/Object cljs.core/IReversible cljs.core/ASeq cljs.core/ISequential cljs.core/INext cljs.core/IReduce cljs.core/ISeq}, :num-fields 2, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 671, :declared true, :name cljs.core/IndexedSeq}, Subvec {:column 10, :line 3524, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/ICollection cljs.core/IVector cljs.core/IHash cljs.core/IIndexed cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/IAssociative cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/IReduce cljs.core/IStack cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 5, :type true, :name cljs.core/Subvec}, string? {:arglists (quote ([x])), :name cljs.core/string?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 103, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, second {:arglists (quote ([coll])), :name cljs.core/second, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Same as (first (next x))", :line 793, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, keys {:arglists (quote ([hash-map])), :name cljs.core/keys, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{clj-nil cljs.core/KeySeq}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a sequence of the map's keys.", :line 5993, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IEncodeJS {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 7219, :protocol-symbol true, :name cljs.core/IEncodeJS}, *2 {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 61, :doc "bound in a repl thread to the second most recent value printed", :name cljs.core/*2}, ->Atom {:arglists (quote ([state meta validator watches])), :name cljs.core/->Atom, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/Atom, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 7020, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, long-array {:arglists (quote ([size-or-seq] [size init-val-or-seq])), :name cljs.core/long-array, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag array, :variadic false, :max-fixed-arity 1} {:tag array, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 2380, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, hash-collision-node-find-index {:arglists (quote ([arr cnt key])), :name cljs.core/hash-collision-node-find-index, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag number, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4790, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, tv-ensure-editable {:arglists (quote ([edit node])), :name cljs.core/tv-ensure-editable, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil cljs.core/VectorNode}, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3630, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ex-cause {:arglists (quote ([ex])), :name cljs.core/ex-cause, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :line 7673, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pv-aset {:arglists (quote ([node idx val])), :name cljs.core/pv-aset, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3184, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, bit-set {:arglists (quote ([x n])), :name cljs.core/bit-set, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Set bit at index n", :line 1728, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, get-global-hierarchy {:arglists (quote ([])), :name cljs.core/get-global-hierarchy, :protocol-impl nil, :max-fixed-arity 0, :methods ({:variadic false, :max-fixed-arity 0}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 7356, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IAssociative {:impls #{cljs.core/PersistentArrayMap cljs.core/Subvec om.core/MapCursor cljs.core/RedNode om.core/IndexedCursor cljs.core/ObjMap cljs.core/PersistentVector cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/PersistentTreeMap}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 256, :protocol-symbol true, :name cljs.core/IAssociative}, sorted? {:arglists (quote ([x])), :name cljs.core/sorted?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if coll satisfies ISorted", :line 1145, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, bit-count {:arglists (quote ([v])), :name cljs.core/bit-count, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Counts the number of bits set in n", :line 1754, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, fixture1 {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 7186, :name cljs.core/fixture1}, char-escapes {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 6729, :private true, :name cljs.core/char-escapes}, long {:arglists (quote ([x])), :name cljs.core/long, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Coerce to long by stripping decimal places. Identical to `int'.", :line 1648, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, Atom {:column 10, :line 7020, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/IHash cljs.core/IWatchable cljs.core/IPrintWithWriter cljs.core/IDeref}, :num-fields 4, :type true, :name cljs.core/Atom}, -sorted-seq-from {:arglists (quote ([coll k ascending?])), :protocol cljs.core/ISorted, :name cljs.core/-sorted-seq-from, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 318, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, inode-kv-reduce {:arglists (quote ([arr f init])), :name cljs.core/inode-kv-reduce, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4464, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, false? {:arglists (quote ([x])), :name cljs.core/false?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if x is the value false, false otherwise.", :line 1204, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, ->TransientVector {:arglists (quote ([cnt shift root tail])), :name cljs.core/->TransientVector, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/TransientVector, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 3687, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, true? {:arglists (quote ([x])), :name cljs.core/true?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if x is the value true, false otherwise.", :line 1208, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, clone-and-set {:arglists (quote ([arr i a] [arr i a j b])), :name cljs.core/clone-and-set, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag array, :variadic false, :max-fixed-arity 3} {:tag array, :variadic false, :max-fixed-arity 5}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4432, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, short {:arglists (quote ([x])), :name cljs.core/short, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 1551, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, -notify-watches {:arglists (quote ([this oldval newval])), :protocol cljs.core/IWatchable, :name cljs.core/-notify-watches, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 339, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, do-dispatch {:arglists (quote ([mf name dispatch-fn args])), :name cljs.core/do-dispatch, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 7526, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, repeat {:arglists (quote ([x] [n x])), :name cljs.core/repeat, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :line 2951, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->NeverEquiv {:arglists (quote ([])), :name cljs.core/->NeverEquiv, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag cljs.core/NeverEquiv, :variadic false, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic false, :line 3905, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IFn {:impls #{cljs.core/PersistentArrayMap cljs.core/Subvec cljs.core/TransientVector cljs.core/RedNode cljs.core/t9562 cljs.core/Keyword cljs.core/ObjMap cljs.core/PersistentVector cljs.core/t9556 cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/Symbol cljs.core/PersistentTreeMap cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 202, :protocol-symbol true, :name cljs.core/IFn}, zipmap {:arglists (quote ([keys vals])), :name cljs.core/zipmap, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a map with the keys mapped to the corresponding vals.", :line 6383, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, distinct {:arglists (quote ([coll])), :name cljs.core/distinct, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :line 6354, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, string-print {:arglists (quote ([x])), :name cljs.core/string-print, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 6722, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, get-in {:arglists (quote ([m ks] [m ks not-found])), :name cljs.core/get-in, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :column 1, :added "1.2", :static true, :protocol-inline nil, :variadic false, :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :line 3117, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, bit-xor {:arglists (quote ([x y])), :name cljs.core/bit-xor, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Bitwise exclusive or", :line 1698, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, complement {:arglists (quote ([f])), :name cljs.core/complement, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :line 2638, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, get-validator {:arglists (quote ([iref])), :name cljs.core/get-validator, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Gets the validator-fn for a var/ref/agent/atom.", :line 7120, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, seqable? {:arglists (quote ([s])), :name cljs.core/seqable?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Return true if s satisfies ISeqable", :line 1222, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, ->PersistentHashMap {:arglists (quote ([meta cnt root has-nil? nil-val __hash])), :name cljs.core/->PersistentHashMap, :protocol-impl nil, :max-fixed-arity 6, :methods ({:tag cljs.core/PersistentHashMap, :variadic false, :max-fixed-arity 6}), :column 1, :protocol-inline nil, :variadic false, :line 5037, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -dissoc {:arglists (quote ([coll k])), :protocol cljs.core/IMap, :name cljs.core/-dissoc, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 261, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, ->MultiFn {:arglists (quote ([name dispatch-fn default-dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy])), :name cljs.core/->MultiFn, :protocol-impl nil, :max-fixed-arity 8, :methods ({:tag cljs.core/MultiFn, :variadic false, :max-fixed-arity 8}), :column 1, :protocol-inline nil, :variadic false, :line 7534, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, js->clj {:arglists (quote ([x] [x & opts])), :name cljs.core/js->clj, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj clj-nil any}, :variadic false, :max-fixed-arity 1} {:tag #{nil clj clj-nil any}, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :line 7260, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pop! {:arglists (quote ([tcoll])), :name cljs.core/pop!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 2509, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, derive {:arglists (quote ([tag parent] [h tag parent])), :name cljs.core/derive, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2} {:tag #{nil clj-nil cljs.core/IMap}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :line 7409, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, INamed {:impls #{cljs.core/Keyword cljs.core/Symbol}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 377, :protocol-symbol true, :name cljs.core/INamed}, ChunkedCons {:protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IChunkedSeq cljs.core/IEmptyableCollection cljs.core/ISeqable cljs.core/Object cljs.core/ASeq cljs.core/ISequential cljs.core/INext cljs.core/IWithMeta cljs.core/IChunkedNext cljs.core/ISeq}, :num-fields 4, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 2255, :declared true, :name cljs.core/ChunkedCons}, PersistentTreeMap {:column 10, :line 5767, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/IKVReduce cljs.core/ISorted cljs.core/IAssociative cljs.core/ISeqable cljs.core/Object cljs.core/IReversible cljs.core/IMap cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 5, :type true, :name cljs.core/PersistentTreeMap}, bitpos {:arglists (quote ([hash shift])), :name cljs.core/bitpos, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4450, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ExceptionInfo {:column 10, :line 7642, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{}, :num-fields 3, :type true, :name cljs.core/ExceptionInfo}, PersistentArrayMap {:column 10, :line 4211, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/IKVReduce cljs.core/IEditableCollection cljs.core/IAssociative cljs.core/ISeqable cljs.core/Object cljs.core/IMap cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 4, :type true, :name cljs.core/PersistentArrayMap}, prefers* {:arglists (quote ([x y prefer-table])), :name cljs.core/prefers*, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{boolean clj-nil}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 7469, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, partition-by {:arglists (quote ([f coll])), :name cljs.core/partition-by, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Applies f to each value in coll, splitting it each time f returns\n   a new value.  Returns a lazy seq of partitions.", :line 6560, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, rem {:arglists (quote ([n d])), :name cljs.core/rem, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "remainder of dividing numerator by denominator.", :line 1683, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, PersistentQueue {:column 10, :line 3851, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/IStack cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 5, :type true, :name cljs.core/PersistentQueue}, -dispatch {:arglists (quote ([mf args])), :protocol cljs.core/IMultiFn, :name cljs.core/-dispatch, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 7516, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, odd? {:arglists (quote ([n])), :name cljs.core/odd?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if n is odd, throws an exception if n is not an integer", :line 2632, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, create-tree-map-seq {:arglists (quote ([tree ascending? cnt])), :name cljs.core/create-tree-map-seq, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/PersistentTreeMapSeq, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5311, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, symbol? {:arglists (quote ([x])), :name cljs.core/symbol?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 405, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, ->BlackNode {:arglists (quote ([key val left right __hash])), :name cljs.core/->BlackNode, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/BlackNode, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 5417, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, mapv {:arglists (quote ([f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls])), :name cljs.core/mapv, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag clj, :variadic false, :max-fixed-arity 2} {:tag #{nil clj any}, :variadic false, :max-fixed-arity 3} {:tag #{nil clj any}, :variadic false, :max-fixed-arity 4} {:tag #{nil clj any}, :variadic true, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :line 3070, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, *print-level* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 38, :dynamic true, :name cljs.core/*print-level*}, TransientHashMap {:protocols #{cljs.core/ICounted cljs.core/ITransientMap cljs.core/Object cljs.core/ITransientAssociative cljs.core/ITransientCollection cljs.core/ILookup}, :num-fields 5, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 5150, :declared true, :name cljs.core/TransientHashMap}, StringBufferWriter {:column 10, :line 383, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IWriter}, :num-fields 1, :type true, :name cljs.core/StringBufferWriter}, js-mod {:arglists (quote ([n d])), :name cljs.core/js-mod, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :line 1667, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, compare-symbols {:arglists (quote ([a b])), :name cljs.core/compare-symbols, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{number any}, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 411, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -assoc! {:arglists (quote ([tcoll key val])), :protocol cljs.core/ITransientAssociative, :name cljs.core/-assoc!, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 351, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, js-obj {:arglists (quote ([] [& keyvals])), :name cljs.core/js-obj, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag object, :variadic false, :max-fixed-arity 0} {:tag any, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :line 1170, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, filterv {:arglists (quote ([pred coll])), :name cljs.core/filterv, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :line 3086, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, key->js {:arglists (quote ([k])), :name cljs.core/key->js, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil string any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 7226, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -remove-watch {:arglists (quote ([this key])), :protocol cljs.core/IWatchable, :name cljs.core/-remove-watch, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 339, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pv-clone-node {:arglists (quote ([node])), :name cljs.core/pv-clone-node, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/VectorNode, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3187, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, re-matches {:arglists (quote ([re s])), :name cljs.core/re-matches, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil clj clj-nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the result of (re-find re s) if re fully matches s.", :line 6662, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, split-with {:arglists (quote ([pred coll])), :name cljs.core/split-with, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :line 6555, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, add-to-string-hash-cache {:arglists (quote ([k])), :name cljs.core/add-to-string-hash-cache, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1082, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IChunk {:impls #{cljs.core/ArrayChunk}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 367, :protocol-symbol true, :name cljs.core/IChunk}, tree-map-remove {:arglists (quote ([comp tree k found])), :name cljs.core/tree-map-remove, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{nil cljs.core/RedNode cljs.core/BlackNode clj-nil}, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5736, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, accumulating-seq-count {:arglists (quote ([coll])), :name cljs.core/accumulating-seq-count, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 849, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, spread {:arglists (quote ([arglist])), :name cljs.core/spread, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{seq clj-nil cljs.core/Cons}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 2448, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, next {:arglists (quote ([coll])), :name cljs.core/next, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{seq clj-nil clj-or-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag seq, :variadic false, :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :line 516, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag seq}, symbol {:arglists (quote ([name] [ns name])), :name cljs.core/symbol, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil cljs.core/Symbol}, :variadic false, :max-fixed-arity 1} {:tag cljs.core/Symbol, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 451, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, vals {:arglists (quote ([hash-map])), :name cljs.core/vals, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{cljs.core/ValSeq clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a sequence of the map's values.", :line 6057, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->ArrayChunk {:arglists (quote ([arr off end])), :name cljs.core/->ArrayChunk, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/ArrayChunk, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 2223, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, select-keys {:arglists (quote ([map keyseq])), :name cljs.core/select-keys, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a map containing only those entries in map whose key is in keys", :line 6092, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, reduceable? {:arglists (quote ([x])), :name cljs.core/reduceable?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if coll satisfies IReduce", :line 1149, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, rand {:arglists (quote ([] [n])), :name cljs.core/rand, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 0} {:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :line 7322, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, deref {:arglists (quote ([o])), :name cljs.core/deref, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 7106, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, tv-push-tail {:arglists (quote ([tv level parent tail-node])), :name cljs.core/tv-push-tail, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{nil cljs.core/VectorNode}, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3643, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IEncodeClojure {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 7257, :protocol-symbol true, :name cljs.core/IEncodeClojure}, -get-method {:arglists (quote ([mf dispatch-val])), :protocol cljs.core/IMultiFn, :name cljs.core/-get-method, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 7516, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -compare {:arglists (quote ([x y])), :protocol cljs.core/IComparable, :name cljs.core/-compare, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 364, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, tail-off {:arglists (quote ([pv])), :name cljs.core/tail-off, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3190, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-inc {:arglists (quote ([x])), :name cljs.core/unchecked-inc, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1588, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, sequence {:arglists (quote ([coll])), :name cljs.core/sequence, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil seq cljs.core/IList}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag seq, :variadic false, :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :line 1278, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag seq}, Box {:column 10, :line 4419, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{}, :num-fields 1, :type true, :name cljs.core/Box}, make-hierarchy {:arglists (quote ([])), :name cljs.core/make-hierarchy, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic false, :doc "Creates a hierarchy object for use with derive, isa? etc.", :line 7350, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, balance-left-del {:arglists (quote ([key val del right])), :name cljs.core/balance-left-del, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{cljs.core/RedNode cljs.core/BlackNode}, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5363, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -disjoin! {:arglists (quote ([tcoll v])), :protocol cljs.core/ITransientSet, :name cljs.core/-disjoin!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 361, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, + {:arglists (quote ([] [x] [x y] [x y & more])), :name cljs.core/+, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 0} {:variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "Returns the sum of nums. (+) returns 0.", :line 1444, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, number? {:arglists (quote ([n])), :name cljs.core/number?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 91, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, assoc! {:arglists (quote ([tcoll key val])), :name cljs.core/assoc!, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 2503, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, descendants {:arglists (quote ([tag] [h tag])), :name cljs.core/descendants, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :line 7400, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, is_proto_ {:arglists (quote ([x])), :name cljs.core/is_proto_, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 117, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, linear-traversal-nth {:arglists (quote ([coll n] [coll n not-found])), :name cljs.core/linear-traversal-nth, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 876, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, into-array {:arglists (quote ([aseq] [type aseq])), :name cljs.core/into-array, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag array, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag array, :variadic false, :line 191, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag array}, last {:arglists (quote ([s])), :name cljs.core/last, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Return the last item in coll, in linear time", :line 818, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, some-fn {:arglists (quote ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps])), :name cljs.core/some-fn, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag function, :variadic false, :max-fixed-arity 1} {:tag function, :variadic false, :max-fixed-arity 2} {:tag function, :variadic false, :max-fixed-arity 3} {:tag function, :variadic true, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic true, :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :line 2820, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-negate {:arglists (quote ([x])), :name cljs.core/unchecked-negate, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1608, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, integer? {:arglists (quote ([n])), :name cljs.core/integer?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if n is an integer.", :line 1233, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, LazySeq {:column 10, :line 2141, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/INext cljs.core/IReduce cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 4, :type true, :name cljs.core/LazySeq}, ->PersistentHashSet {:arglists (quote ([meta hash-map __hash])), :name cljs.core/->PersistentHashSet, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/PersistentHashSet, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 6110, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, reduced? {:arglists (quote ([r])), :name cljs.core/reduced?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if x is the result of a call to reduced", :line 592, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, editable-array-for {:arglists (quote ([tv i])), :name cljs.core/editable-array-for, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3669, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->ChunkedCons {:arglists (quote ([chunk more meta __hash])), :name cljs.core/->ChunkedCons, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/ChunkedCons, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 2255, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, MultiFn {:column 10, :line 7534, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IHash cljs.core/IMultiFn}, :num-fields 8, :type true, :name cljs.core/MultiFn}, -prefers {:arglists (quote ([mf])), :protocol cljs.core/IMultiFn, :name cljs.core/-prefers, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 7516, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, prn {:arglists (quote ([& objs])), :name cljs.core/prn, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag clj-nil, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "Same as pr followed by (newline).", :line 6902, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->PersistentTreeMap {:arglists (quote ([comp tree cnt meta __hash])), :name cljs.core/->PersistentTreeMap, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/PersistentTreeMap, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 5767, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, with-meta {:arglists (quote ([o meta])), :name cljs.core/with-meta, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{clj clj-nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :line 1027, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -add-watch {:arglists (quote ([this key f])), :protocol cljs.core/IWatchable, :name cljs.core/-add-watch, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 339, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, floats {:arglists (quote ([x])), :name cljs.core/floats, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1663, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, TransientHashSet {:protocols #{cljs.core/IFn cljs.core/ICounted cljs.core/ITransientSet cljs.core/ITransientCollection cljs.core/ILookup}, :num-fields 1, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 6188, :declared true, :name cljs.core/TransientHashSet}, * {:arglists (quote ([] [x] [x y] [x y & more])), :name cljs.core/*, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 0} {:variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "Returns the product of nums. (*) returns 1.", :line 1459, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, butlast {:arglists (quote ([s])), :name cljs.core/butlast, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag seq, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 6368, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, RSeq {:protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/IReduce cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 3, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 748, :declared true, :name cljs.core/RSeq}, - {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/-, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :line 1452, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, lookup-sentinel {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 1202, :private true, :name cljs.core/lookup-sentinel}, -empty {:arglists (quote ([coll])), :protocol cljs.core/IEmptyableCollection, :name cljs.core/-empty, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 232, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, NeverEquiv {:column 10, :line 3905, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IEquiv}, :num-fields 0, :type true, :name cljs.core/NeverEquiv}, reversible? {:arglists (quote ([coll])), :name cljs.core/reversible?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 1989, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, rseq {:arglists (quote ([coll])), :name cljs.core/rseq, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag seq, :variadic false, :line 1992, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag seq}, flatten1 {:arglists (quote ([colls])), :name cljs.core/flatten1, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :line 2992, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, seq? {:arglists (quote ([s])), :name cljs.core/seq?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Return true if s satisfies ISeq", :line 1215, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, ci-reduce {:arglists (quote ([cicoll f] [cicoll f val] [cicoll f val idx])), :name cljs.core/ci-reduce, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3} {:tag #{nil any}, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :line 597, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pack-array-node {:arglists (quote ([array-node edit idx])), :name cljs.core/pack-array-node, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/BitmapIndexedNode, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4680, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, identical? {:arglists (quote ([x y])), :name cljs.core/identical?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Tests if 2 arguments are the same object", :line 78, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, print {:name cljs.core/print, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag clj-nil, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :line 6878, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, array-map-index-of-identical? {:arglists (quote ([arr m k])), :name cljs.core/array-map-index-of-identical?, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag number, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4111, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, vary-meta {:arglists (quote ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d] [obj f a b c d & args])), :name cljs.core/vary-meta, :protocol-impl nil, :max-fixed-arity 6, :methods ({:tag #{clj clj-nil any}, :variadic false, :max-fixed-arity 2} {:tag #{clj clj-nil any}, :variadic false, :max-fixed-arity 3} {:tag #{clj clj-nil any}, :variadic false, :max-fixed-arity 4} {:tag #{clj clj-nil any}, :variadic false, :max-fixed-arity 5} {:tag #{clj clj-nil any}, :variadic false, :max-fixed-arity 6} {:tag #{clj clj-nil any}, :variadic true, :max-fixed-arity 6}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :line 2571, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, PersistentTreeSet {:column 10, :line 6225, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/ISet cljs.core/Object cljs.core/IReversible cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 3, :type true, :name cljs.core/PersistentTreeSet}, bit-flip {:arglists (quote ([x n])), :name cljs.core/bit-flip, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Flip bit at index n", :line 1719, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, zero? {:arglists (quote ([n])), :name cljs.core/zero?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 1778, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, bit-and {:arglists (quote ([x y])), :name cljs.core/bit-and, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Bitwise and", :line 1702, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, key-test {:arglists (quote ([key other])), :name cljs.core/key-test, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 4423, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, -comparator {:arglists (quote ([coll])), :protocol cljs.core/ISorted, :name cljs.core/-comparator, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 318, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, newline {:arglists (quote ([opts])), :name cljs.core/newline, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 6855, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IDeref {:impls #{cljs.core/Atom cljs.core/Reduced cljs.core.async.impl.channels/t13097 cljs.core/Delay cljs.core.async.impl.channels/t13094}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 279, :protocol-symbol true, :name cljs.core/IDeref}, edit-and-set {:arglists (quote ([inode edit i a] [inode edit i a j b])), :name cljs.core/edit-and-set, :protocol-impl nil, :max-fixed-arity 6, :methods ({:variadic false, :max-fixed-arity 4} {:variadic false, :max-fixed-arity 6}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4453, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->Symbol {:arglists (quote ([ns name str _hash _meta])), :name cljs.core/->Symbol, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/Symbol, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 423, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, replicate {:arglists (quote ([n x])), :name cljs.core/replicate, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy seq of n xs.", :line 2956, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, balance-right-del {:arglists (quote ([key val left del])), :name cljs.core/balance-right-del, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{cljs.core/RedNode cljs.core/BlackNode}, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5382, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, keep-indexed {:arglists (quote ([f coll])), :name cljs.core/keep-indexed, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :line 2758, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, native-satisfies? {:arglists (quote ([p x])), :name cljs.core/native-satisfies?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Internal - do not use!", :line 107, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, distinct? {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/distinct?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1} {:tag boolean, :variadic false, :max-fixed-arity 2} {:tag boolean, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic true, :doc "Returns true if no two of the arguments are =", :line 1260, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, vec {:arglists (quote ([coll])), :name cljs.core/vec, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 3428, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, tree-map-replace {:arglists (quote ([comp tree k v])), :name cljs.core/tree-map-replace, :protocol-impl nil, :max-fixed-arity 4, :methods ({:variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5758, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -equiv {:arglists (quote ([o other])), :protocol cljs.core/IEquiv, :name cljs.core/-equiv, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 297, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, obj-map-compare-keys {:arglists (quote ([a b])), :name cljs.core/obj-map-compare-keys, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3939, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, concat {:arglists (quote ([] [x] [x y] [x y & zs])), :name cljs.core/concat, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 0} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2} {:tag cljs.core/LazySeq, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :line 2456, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, update-in {:arglists (quote ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c] [m [k & ks] f a b c & args])), :name cljs.core/update-in, :protocol-impl nil, :max-fixed-arity 6, :methods ({:tag clj, :variadic false, :max-fixed-arity 3} {:tag clj, :variadic false, :max-fixed-arity 4} {:tag clj, :variadic false, :max-fixed-arity 5} {:tag clj, :variadic false, :max-fixed-arity 6} {:tag clj, :variadic true, :max-fixed-arity 6}), :column 1, :protocol-inline nil, :variadic true, :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :line 3147, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, vector {:arglists (quote ([& args])), :name cljs.core/vector, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag #{clj any}, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :line 3434, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, seq-reduce {:arglists (quote ([f coll] [f val coll])), :name cljs.core/seq-reduce, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 1363, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->RedNode {:arglists (quote ([key val left right __hash])), :name cljs.core/->RedNode, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/RedNode, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 5519, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, conj {:arglists (quote ([coll x] [coll x & xs])), :name cljs.core/conj, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj, :variadic false, :max-fixed-arity 2} {:tag clj, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic true, :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :line 830, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, find-and-cache-best-method {:arglists (quote ([name dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy])), :name cljs.core/find-and-cache-best-method, :protocol-impl nil, :max-fixed-arity 7, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 7}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 7491, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, / {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core//, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :line 1468, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, ->StringBufferWriter {:arglists (quote ([sb])), :name cljs.core/->StringBufferWriter, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/StringBufferWriter, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 383, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-add {:arglists (quote ([] [x] [x y] [x y & more])), :name cljs.core/unchecked-add, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 0} {:variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "Returns the sum of nums. (+) returns 0.", :line 1561, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, assoc {:arglists (quote ([coll k v] [coll k v & kvs])), :name cljs.core/assoc, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag clj, :variadic false, :max-fixed-arity 3} {:tag clj, :variadic true, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic true, :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :line 995, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, fix {:arglists (quote ([q])), :name cljs.core/fix, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :ret-tag number, :variadic false, :line 1633, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, unchecked-remainder-int {:arglists (quote ([x n])), :name cljs.core/unchecked-remainder-int, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 1616, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -nth {:arglists (quote ([coll n] [coll n not-found])), :protocol cljs.core/IIndexed, :name cljs.core/-nth, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 241, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, boolean {:arglists (quote ([x])), :name cljs.core/boolean, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 1227, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, neg? {:arglists (quote ([x])), :name cljs.core/neg?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if num is less than zero, else false", :line 1781, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, doubles {:arglists (quote ([x])), :name cljs.core/doubles, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1664, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ISequential {:impls #{cljs.core/PersistentQueue cljs.core/EmptyList cljs.core/ValSeq cljs.core/Subvec cljs.core/Range cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueueSeq cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/RedNode cljs.core/ChunkedCons om.core/IndexedCursor cljs.core/PersistentVector cljs.core/ArrayNodeSeq cljs.core/RSeq cljs.core/LazySeq cljs.core/BlackNode cljs.core/NodeSeq cljs.core/Cons cljs.core/PersistentTreeMapSeq cljs.core/KeySeq cljs.core/List}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 306, :protocol-symbol true, :name cljs.core/ISequential}, js-delete {:arglists (quote ([obj key])), :name cljs.core/js-delete, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 1181, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -reset {:arglists (quote ([mf])), :protocol cljs.core/IMultiFn, :name cljs.core/-reset, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 7516, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, isa? {:arglists (quote ([child parent] [h child parent])), :name cljs.core/isa?, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2} {:tag boolean, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :line 7364, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, -deref-with-timeout {:arglists (quote ([o msec timeout-val])), :protocol cljs.core/IDerefWithTimeout, :name cljs.core/-deref-with-timeout, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 282, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -pr-writer {:arglists (quote ([o writer opts])), :protocol cljs.core/IPrintWithWriter, :name cljs.core/-pr-writer, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 328, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -kv-reduce {:arglists (quote ([coll f init])), :protocol cljs.core/IKVReduce, :name cljs.core/-kv-reduce, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 294, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, remove-watch {:arglists (quote ([iref key])), :name cljs.core/remove-watch, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :line 7163, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, print-str {:arglists (quote ([& objs])), :name cljs.core/print-str, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag #{nil string}, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "print to a string, returning it", :line 6885, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, rsubseq {:arglists (quote ([sc test key] [sc start-test start-key end-test end-key])), :name cljs.core/rsubseq, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag #{clj seq cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 3} {:tag #{cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :line 6449, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, *flush-on-newline* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 32, :dynamic true, :name cljs.core/*flush-on-newline*}, HashCollisionNode {:column 10, :line 4799, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/Object}, :num-fields 4, :type true, :name cljs.core/HashCollisionNode}, vector? {:arglists (quote ([x])), :name cljs.core/vector?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Return true if x satisfies IVector", :line 1160, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, split-at {:arglists (quote ([n coll])), :name cljs.core/split-at, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a vector of [(take n coll) (drop n coll)]", :line 2946, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, chunk-cons {:arglists (quote ([chunk rest])), :name cljs.core/chunk-cons, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil cljs.core/ChunkedCons}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 2315, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, int-array {:arglists (quote ([size-or-seq] [size init-val-or-seq])), :name cljs.core/int-array, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag array, :variadic false, :max-fixed-arity 1} {:tag array, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 2360, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->KeySeq {:arglists (quote ([mseq _meta])), :name cljs.core/->KeySeq, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/KeySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 5940, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-long {:arglists (quote ([x])), :name cljs.core/unchecked-long, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Coerce to long by stripping decimal places. Identical to `int'.", :line 1653, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, float {:arglists (quote ([x])), :name cljs.core/float, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 1552, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, mk-bound-fn {:arglists (quote ([sc test key])), :name cljs.core/mk-bound-fn, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag function, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 6428, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, map {:arglists (quote ([f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls])), :name cljs.core/map, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 3} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 4} {:tag cljs.core/LazySeq, :variadic true, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns a lazy sequence consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :line 2859, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, INext {:impls #{cljs.core/EmptyList cljs.core/ValSeq cljs.core/Range cljs.core/PersistentArrayMapSeq cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/KeySeq cljs.core/List}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 250, :protocol-symbol true, :name cljs.core/INext}, -as-transient {:arglists (quote ([coll])), :protocol cljs.core/IEditableCollection, :name cljs.core/-as-transient, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 344, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, counted? {:arglists (quote ([x])), :name cljs.core/counted?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if coll implements count in constant time", :line 663, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, double-array {:arglists (quote ([size-or-seq] [size init-val-or-seq])), :name cljs.core/double-array, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag array, :variadic false, :max-fixed-arity 1} {:tag array, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 2400, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IPrintWithWriter {:impls #{cljs.core/PersistentQueue cljs.core/PersistentArrayMap cljs.core/Atom cljs.core/EmptyList cljs.core/ValSeq cljs.core/Subvec om.core/MapCursor cljs.core/Range cljs.core/PersistentArrayMapSeq cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/RedNode cljs.core/ChunkedCons om.core/IndexedCursor cljs.core/Keyword cljs.core/ObjMap cljs.core.async.impl.timers/SkipListNode cljs.core/PersistentVector cljs.core/ArrayNodeSeq cljs.core/RSeq cljs.core/PersistentTreeSet cljs.core/LazySeq cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/NodeSeq cljs.core/Cons cljs.core/UUID cljs.core/PersistentTreeMapSeq cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/Symbol cljs.core/PersistentTreeMap cljs.core.async.impl.timers/SkipList cljs.core/KeySeq cljs.core/List cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 328, :protocol-symbol true, :name cljs.core/IPrintWithWriter}, IKVReduce {:impls #{cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/PersistentVector cljs.core/PersistentHashMap cljs.core/PersistentTreeMap}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 294, :protocol-symbol true, :name cljs.core/IKVReduce}, NodeSeq {:column 10, :line 4915, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/IReduce cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 5, :type true, :name cljs.core/NodeSeq}, clone {:arglists (quote ([value])), :name cljs.core/clone, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 466, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, *print-length* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 37, :dynamic true, :name cljs.core/*print-length*}, frequencies {:arglists (quote ([coll])), :name cljs.core/frequencies, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :line 6571, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, chars {:arglists (quote ([x])), :name cljs.core/chars, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1660, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, rand-int {:arglists (quote ([n])), :name cljs.core/rand-int, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :line 7328, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -add-method {:arglists (quote ([mf dispatch-val method])), :protocol cljs.core/IMultiFn, :name cljs.core/-add-method, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 7516, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, *1 {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 57, :doc "bound in a repl thread to the most recent value printed", :name cljs.core/*1}, unchecked-short {:arglists (quote ([x])), :name cljs.core/unchecked-short, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 1557, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, prn-str {:arglists (quote ([& objs])), :name cljs.core/prn-str, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag #{nil string}, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "Same as pr-str followed by (newline)", :line 6865, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, iterate {:arglists (quote ([f x])), :name cljs.core/iterate, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/Cons, :variadic false, :max-fixed-arity 2}), :column 1, :added "1.0", :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :line 2967, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IRecord {:impls #{cljs.core.async.impl.ioc-helpers/ExceptionFrame}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 312, :protocol-symbol true, :name cljs.core/IRecord}, chunk-append {:arglists (quote ([b x])), :name cljs.core/chunk-append, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 2320, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-double {:arglists (quote ([x])), :name cljs.core/unchecked-double, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 1559, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, unchecked-int {:arglists (quote ([x])), :name cljs.core/unchecked-int, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Coerce to int by stripping decimal places.", :line 1643, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, mapcat {:arglists (quote ([f coll] [f coll & colls])), :name cljs.core/mapcat, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2} {:tag cljs.core/LazySeq, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :line 3004, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ICollection {:impls #{cljs.core/PersistentQueue cljs.core/PersistentArrayMap cljs.core/EmptyList cljs.core/ValSeq cljs.core/Subvec om.core/MapCursor cljs.core/Range cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueueSeq cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/RedNode cljs.core/ChunkedCons om.core/IndexedCursor cljs.core/ObjMap cljs.core/PersistentVector cljs.core/ArrayNodeSeq cljs.core/RSeq cljs.core/PersistentTreeSet cljs.core/LazySeq cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/NodeSeq cljs.core/Cons cljs.core/PersistentTreeMapSeq cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/List cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 235, :protocol-symbol true, :name cljs.core/ICollection}, assoc-in {:arglists (quote ([m [k & ks] v])), :name cljs.core/assoc-in, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :line 3138, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, special-symbol? {:arglists (quote ([x])), :name cljs.core/special-symbol?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 7688, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, build-subvec {:arglists (quote ([meta v start end __hash])), :name cljs.core/build-subvec, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/Subvec, :variadic false, :max-fixed-arity 5}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3608, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, conj! {:arglists (quote ([tcoll val])), :name cljs.core/conj!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 2500, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, inc {:arglists (quote ([x])), :name cljs.core/inc, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a number one greater than num.", :line 577, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, RedNode {:protocols #{cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/ICollection cljs.core/IVector cljs.core/IHash cljs.core/IIndexed cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/IAssociative cljs.core/ISeqable cljs.core/Object cljs.core/IMapEntry cljs.core/ISequential cljs.core/IReduce cljs.core/IStack cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 5, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 5519, :declared true, :name cljs.core/RedNode}, ASeq {:impls #{cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Cons cljs.core/List}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 244, :protocol-symbol true, :name cljs.core/ASeq}, every-pred {:arglists (quote ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps])), :name cljs.core/every-pred, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag function, :variadic false, :max-fixed-arity 1} {:tag function, :variadic false, :max-fixed-arity 2} {:tag function, :variadic false, :max-fixed-arity 3} {:tag function, :variadic true, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic true, :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :line 2781, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IReversible {:impls #{cljs.core/IndexedSeq cljs.core/PersistentVector cljs.core/PersistentTreeSet cljs.core/PersistentTreeMap}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 315, :protocol-symbol true, :name cljs.core/IReversible}, -realized? {:arglists (quote ([d])), :protocol cljs.core/IPending, :name cljs.core/-realized?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 336, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, array-chunk {:arglists (quote ([arr] [arr off] [arr off end])), :name cljs.core/array-chunk, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/ArrayChunk, :variadic false, :max-fixed-arity 1} {:tag cljs.core/ArrayChunk, :variadic false, :max-fixed-arity 2} {:tag cljs.core/ArrayChunk, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 2247, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, create-array-node-seq {:arglists (quote ([nodes] [meta nodes i s])), :name cljs.core/create-array-node-seq, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{cljs.core/ArrayNodeSeq clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{cljs.core/ArrayNodeSeq clj-nil}, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5021, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, persistent-array-map-seq {:arglists (quote ([arr i _meta])), :name cljs.core/persistent-array-map-seq, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{cljs.core/PersistentArrayMapSeq clj-nil}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 4207, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ChunkedSeq {:protocols #{cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IChunkedSeq cljs.core/IEmptyableCollection cljs.core/ISeqable cljs.core/Object cljs.core/ASeq cljs.core/ISequential cljs.core/INext cljs.core/IReduce cljs.core/IWithMeta cljs.core/IChunkedNext cljs.core/ISeq}, :num-fields 6, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 3441, :declared true, :name cljs.core/ChunkedSeq}, ->RSeq {:arglists (quote ([ci i meta])), :name cljs.core/->RSeq, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/RSeq, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 748, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unsigned-bit-shift-right {:arglists (quote ([x n])), :name cljs.core/unsigned-bit-shift-right, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Bitwise shift right with zero fill", :line 1750, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, chunked-seq {:arglists (quote ([vec i off] [vec node i off] [vec node i off meta])), :name cljs.core/chunked-seq, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/ChunkedSeq, :variadic false, :max-fixed-arity 3} {:tag cljs.core/ChunkedSeq, :variadic false, :max-fixed-arity 4} {:tag cljs.core/ChunkedSeq, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 3516, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, shuffle {:arglists (quote ([coll])), :name cljs.core/shuffle, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Return a random permutation of coll", :line 1379, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, divide {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 1466, :declared true, :name cljs.core/divide}, re-find {:arglists (quote ([re s])), :name cljs.core/re-find, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil clj clj-nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :line 6671, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, BitmapIndexedNode {:column 10, :line 4482, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/Object}, :num-fields 3, :type true, :name cljs.core/BitmapIndexedNode}, bit-not {:arglists (quote ([x])), :name cljs.core/bit-not, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Bitwise complement", :line 1724, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IMapEntry {:impls #{cljs.core/RedNode cljs.core/PersistentVector cljs.core/BlackNode}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 265, :protocol-symbol true, :name cljs.core/IMapEntry}, seq {:arglists (quote ([coll])), :name cljs.core/seq, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{cljs.core/IndexedSeq clj-nil clj-or-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag seq, :variadic false, :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :line 469, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag seq}, unchecked-multiply-int {:arglists (quote ([] [x] [x y] [x y & more])), :name cljs.core/unchecked-multiply-int, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 0} {:variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "Returns the product of nums. (*) returns 1.", :line 1601, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, to-array-2d {:arglists (quote ([coll])), :name cljs.core/to-array-2d, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag array, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :line 2349, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, array-map-index-of-equiv? {:arglists (quote ([arr m k])), :name cljs.core/array-map-index-of-equiv?, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag number, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4119, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, sorted-map-by {:arglists (quote ([comparator & keyvals])), :name cljs.core/sorted-map-by, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs/core.PersistentTreeMap, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :line 5930, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, filter {:arglists (quote ([pred coll])), :name cljs.core/filter, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :line 3012, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -key {:arglists (quote ([coll])), :protocol cljs.core/IMapEntry, :name cljs.core/-key, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 265, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, bounded-count {:arglists (quote ([s n])), :name cljs.core/bounded-count, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 2440, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, js-keys {:arglists (quote ([obj])), :name cljs.core/js-keys, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag array, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1176, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, alter-meta! {:arglists (quote ([iref f & args])), :name cljs.core/alter-meta!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic true, :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :line 7125, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-dec-int {:arglists (quote ([x])), :name cljs.core/unchecked-dec-int, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1578, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, key {:arglists (quote ([map-entry])), :name cljs.core/key, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the key of the map entry.", :line 5999, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -seq {:arglists (quote ([o])), :protocol cljs.core/ISeqable, :name cljs.core/-seq, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag clj-or-nil, :variadic false, :line 303, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj-or-nil}, ->Keyword {:arglists (quote ([ns name fqn _hash])), :name cljs.core/->Keyword, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/Keyword, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 2073, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, equiv-map {:arglists (quote ([x y])), :name cljs.core/equiv-map, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :line 3911, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, re-seq {:arglists (quote ([re s])), :name cljs.core/re-seq, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of successive matches of re in s.", :line 6683, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, empty? {:arglists (quote ([coll])), :name cljs.core/empty?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :line 1117, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, ->PersistentVector {:arglists (quote ([meta cnt shift root tail __hash])), :name cljs.core/->PersistentVector, :protocol-impl nil, :max-fixed-arity 6, :methods ({:tag cljs.core/PersistentVector, :variadic false, :max-fixed-arity 6}), :column 1, :protocol-inline nil, :variadic false, :line 3264, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->Range {:arglists (quote ([meta start end step __hash])), :name cljs.core/->Range, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/Range, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 6464, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ITransientSet {:impls #{cljs.core/TransientHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 361, :protocol-symbol true, :name cljs.core/ITransientSet}, name {:arglists (quote ([x])), :name cljs.core/name, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil string}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the name String of a string, symbol or keyword.", :line 6374, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, list? {:arglists (quote ([x])), :name cljs.core/list?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 2070, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, array-map-index-of-keyword? {:arglists (quote ([arr m k])), :name cljs.core/array-map-index-of-keyword?, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag number, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4089, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->NodeSeq {:arglists (quote ([meta nodes i s __hash])), :name cljs.core/->NodeSeq, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/NodeSeq, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 4915, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pr-opts {:arglists (quote ([])), :name cljs.core/pr-opts, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 0}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 40, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->PersistentArrayMap {:arglists (quote ([meta cnt arr __hash])), :name cljs.core/->PersistentArrayMap, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/PersistentArrayMap, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 4211, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, aset {:arglists (quote ([array i val] [array idx idx2 & idxv])), :name cljs.core/aset, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 3} {:tag any, :variadic true, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic true, :doc "Sets the value at the index.", :line 177, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, nnext {:arglists (quote ([coll])), :name cljs.core/nnext, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag seq, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Same as (next (next x))", :line 813, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, bit-shift-right-zero-fill {:arglists (quote ([x n])), :name cljs.core/bit-shift-right-zero-fill, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "DEPRECATED: Bitwise shift right with zero fill", :line 1746, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, doall {:arglists (quote ([coll] [n coll])), :name cljs.core/doall, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 1} {:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :line 6643, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, not-any? {:arglists (quote ([pred coll])), :name cljs.core/not-any?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :line 2621, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, PersistentHashMap {:protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/IKVReduce cljs.core/IEditableCollection cljs.core/IAssociative cljs.core/ISeqable cljs.core/Object cljs.core/IMap cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 6, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 5037, :declared true, :name cljs.core/PersistentHashMap}, reductions {:arglists (quote ([f coll] [f init coll])), :name cljs.core/reductions, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2} {:tag cljs.core/Cons, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :line 6580, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IWatchable {:impls #{cljs.core/Atom}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 339, :protocol-symbol true, :name cljs.core/IWatchable}, into {:arglists (quote ([to from])), :name cljs.core/into, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil clj any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.", :line 3060, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, tv-pop-tail {:arglists (quote ([tv level node])), :name cljs.core/tv-pop-tail, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil cljs.core/VectorNode clj-nil}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3655, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, object? {:arglists (quote ([x])), :name cljs.core/object?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 98, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, transient {:arglists (quote ([coll])), :name cljs.core/transient, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 2494, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, *print-newline* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 33, :dynamic true, :name cljs.core/*print-newline*}, ffirst {:arglists (quote ([coll])), :name cljs.core/ffirst, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Same as (first (first x))", :line 798, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, bit-clear {:arglists (quote ([x n])), :name cljs.core/bit-clear, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Clear bit at index n", :line 1714, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, hash-symbol {:arglists (quote ([sym])), :name cljs.core/hash-symbol, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 408, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, set-print-fn! {:arglists (quote ([f])), :name cljs.core/set-print-fn!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Set *print-fn* to f.", :line 28, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pr-sb-with-opts {:arglists (quote ([objs opts])), :name cljs.core/pr-sb-with-opts, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag goog.string/StringBuffer, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 6825, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -clj->js {:arglists (quote ([x])), :protocol cljs.core/IEncodeJS, :name cljs.core/-clj->js, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 7219, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, hash {:arglists (quote ([o])), :name cljs.core/hash, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil number any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1097, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, gensym_counter {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 7172, :name cljs.core/gensym_counter}, compare-indexed {:arglists (quote ([xs ys] [xs ys len n])), :name cljs.core/compare-indexed, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag number, :variadic false, :max-fixed-arity 2} {:tag number, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :doc "Compare indexed collection.", :line 1307, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IPending {:impls #{cljs.core/Delay}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 336, :protocol-symbol true, :name cljs.core/IPending}, associative? {:arglists (quote ([x])), :name cljs.core/associative?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if coll implements Associative", :line 1137, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, Delay {:column 10, :line 7191, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IDeref cljs.core/IPending}, :num-fields 2, :type true, :name cljs.core/Delay}, tv-editable-tail {:arglists (quote ([tl])), :name cljs.core/tv-editable-tail, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag array, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3638, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, scan-array {:arglists (quote ([incr k array])), :name cljs.core/scan-array, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{number clj-nil}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3925, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, drop-last {:arglists (quote ([s] [n s])), :name cljs.core/drop-last, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :line 2915, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, replace {:arglists (quote ([smap coll])), :name cljs.core/replace, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil cljs.core/LazySeq any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap", :line 6340, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ArrayChunk {:protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce cljs.core/IChunk}, :num-fields 3, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 2223, :declared true, :name cljs.core/ArrayChunk}, parents {:arglists (quote ([tag] [h tag])), :name cljs.core/parents, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :line 7384, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, map? {:arglists (quote ([x])), :name cljs.core/map?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Return true if x satisfies IMap", :line 1153, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, keyword-identical? {:arglists (quote ([x y])), :name cljs.core/keyword-identical?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 2111, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, prefers {:arglists (quote ([multifn])), :name cljs.core/prefers, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Given a multimethod, returns a map of preferred value -> set of other values", :line 7618, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, quot {:arglists (quote ([n d])), :name cljs.core/quot, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "quot[ient] of dividing numerator by denominator.", :line 1677, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, chunk-rest {:arglists (quote ([s])), :name cljs.core/chunk-rest, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 2329, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-negate-int {:arglists (quote ([x])), :name cljs.core/unchecked-negate-int, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1611, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, reverse {:arglists (quote ([coll])), :name cljs.core/reverse, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil seq any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :line 1995, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-substract {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/unchecked-substract, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :line 1619, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, IReduce {:impls #{cljs.core/EmptyList cljs.core/ValSeq cljs.core/Subvec cljs.core/Range cljs.core/PersistentArrayMapSeq cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/RedNode cljs.core/PersistentVector cljs.core/ArrayNodeSeq cljs.core/RSeq cljs.core/ArrayChunk cljs.core/LazySeq cljs.core/BlackNode cljs.core/NodeSeq cljs.core/Cons cljs.core/PersistentTreeMapSeq cljs.core/KeySeq cljs.core/List}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 291, :protocol-symbol true, :name cljs.core/IReduce}, count {:arglists (quote ([coll])), :name cljs.core/count, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :line 855, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, set {:arglists (quote ([coll])), :name cljs.core/set, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a set of the distinct elements of coll.", :line 6307, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->HashCollisionNode {:arglists (quote ([edit collision-hash cnt arr])), :name cljs.core/->HashCollisionNode, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/HashCollisionNode, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 4799, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -chunked-rest {:arglists (quote ([coll])), :protocol cljs.core/IChunkedSeq, :name cljs.core/-chunked-rest, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 370, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ex-info {:arglists (quote ([msg map] [msg map cause])), :name cljs.core/ex-info, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/ExceptionInfo, :variadic false, :max-fixed-arity 2} {:tag cljs.core/ExceptionInfo, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :line 7648, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->ValSeq {:arglists (quote ([mseq _meta])), :name cljs.core/->ValSeq, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/ValSeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 6004, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, extend-object! {:arglists (quote ([obj fn-map])), :name cljs.core/extend-object!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :line 1868, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -chunked-first {:arglists (quote ([coll])), :protocol cljs.core/IChunkedSeq, :name cljs.core/-chunked-first, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 370, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, fn->comparator {:arglists (quote ([f])), :name cljs.core/fn->comparator, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{number function}, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :line 1322, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->ArrayNodeSeq {:arglists (quote ([meta nodes i s __hash])), :name cljs.core/->ArrayNodeSeq, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/ArrayNodeSeq, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 4980, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, comp {:arglists (quote ([] [f] [f g] [f g h] [f1 f2 f3 & fs])), :name cljs.core/comp, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 0} {:variadic false, :max-fixed-arity 1} {:tag function, :variadic false, :max-fixed-arity 2} {:tag function, :variadic false, :max-fixed-arity 3} {:tag function, :variadic true, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic true, :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :line 2652, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, nth {:arglists (quote ([coll n] [coll n not-found])), :name cljs.core/nth, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :line 896, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, byte {:arglists (quote ([x])), :name cljs.core/byte, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 1541, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, dissoc! {:arglists (quote ([tcoll key])), :name cljs.core/dissoc!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 2506, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -peek {:arglists (quote ([coll])), :protocol cljs.core/IStack, :name cljs.core/-peek, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 272, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -assoc {:arglists (quote ([coll k v])), :protocol cljs.core/IAssociative, :name cljs.core/-assoc, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 256, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, never-equiv {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 3909, :private true, :name cljs.core/never-equiv}, dominates {:arglists (quote ([x y prefer-table])), :name cljs.core/dominates, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{boolean clj-nil}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 7487, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -prefer-method {:arglists (quote ([mf dispatch-val dispatch-val-y])), :protocol cljs.core/IMultiFn, :name cljs.core/-prefer-method, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 7516, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ISorted {:impls #{cljs.core/PersistentTreeSet cljs.core/PersistentTreeMap}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 318, :protocol-symbol true, :name cljs.core/ISorted}, constantly {:arglists (quote ([x])), :name cljs.core/constantly, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a function that takes any number of arguments and returns x.", :line 2648, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, t9556 {:column 7, :line 1033, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IFn cljs.core/Fn cljs.core/IWithMeta}, :num-fields 4, :type true, :name cljs.core/t9556}, ITransientMap {:impls #{cljs.core/TransientArrayMap cljs.core/TransientHashMap}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 354, :protocol-symbol true, :name cljs.core/ITransientMap}, namespace {:arglists (quote ([x])), :name cljs.core/namespace, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag string, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :line 2119, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, swap-global-hierarchy! {:arglists (quote ([f & args])), :name cljs.core/swap-global-hierarchy!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic true, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic true, :line 7361, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pr-str {:arglists (quote ([& objs])), :name cljs.core/pr-str, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag #{nil string}, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :line 6860, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, < {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/<, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1} {:tag boolean, :variadic false, :max-fixed-arity 2} {:tag boolean, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic true, :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :line 1475, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, sort-by {:arglists (quote ([keyfn coll] [keyfn comp coll])), :name cljs.core/sort-by, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{seq cljs.core/IList}, :variadic false, :max-fixed-arity 2} {:tag #{seq cljs.core/IList}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :line 1352, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, cycle {:arglists (quote ([coll])), :name cljs.core/cycle, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :line 2940, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, peek {:arglists (quote ([coll])), :name cljs.core/peek, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :line 1049, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pr-with-opts {:arglists (quote ([objs opts])), :name cljs.core/pr-with-opts, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :line 6849, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, reduce {:arglists (quote ([f coll] [f val coll])), :name cljs.core/reduce, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :line 1386, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, clj->js {:arglists (quote ([x])), :name cljs.core/clj->js, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil string array object clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :line 7236, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, interleave {:arglists (quote ([c1 c2] [c1 c2 & colls])), :name cljs.core/interleave, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2} {:tag cljs.core/LazySeq, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :line 2972, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -sorted-seq {:arglists (quote ([coll ascending?])), :protocol cljs.core/ISorted, :name cljs.core/-sorted-seq, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 318, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, ->TransientHashSet {:arglists (quote ([transient-map])), :name cljs.core/->TransientHashSet, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/TransientHashSet, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 6188, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, print-map {:arglists (quote ([m print-one writer opts])), :name cljs.core/print-map, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag any, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 6909, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pv-aget {:arglists (quote ([node idx])), :name cljs.core/pv-aget, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3181, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, cons {:arglists (quote ([x coll])), :name cljs.core/cons, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/Cons, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a new seq where x is the first element and seq is the rest.", :line 2062, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->TransientArrayMap {:arglists (quote ([editable? len arr])), :name cljs.core/->TransientArrayMap, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/TransientArrayMap, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 4340, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, str {:arglists (quote ([] [x] [x & ys])), :name cljs.core/str, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag string, :variadic false, :max-fixed-arity 0} {:tag #{nil string}, :variadic false, :max-fixed-arity 1} {:variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :line 1797, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ArrayNode {:protocols #{cljs.core/Object}, :num-fields 3, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 4693, :declared true, :name cljs.core/ArrayNode}, type->str {:arglists (quote ([ty])), :name cljs.core/type->str, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 140, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -rseq {:arglists (quote ([coll])), :protocol cljs.core/IReversible, :name cljs.core/-rseq, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 315, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, remove-all-methods {:arglists (quote ([multifn])), :name cljs.core/remove-all-methods, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Removes all of the methods of multimethod.", :line 7593, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ISeqable {:impls #{cljs.core/PersistentQueue cljs.core/PersistentArrayMap cljs.core/EmptyList cljs.core/ValSeq cljs.core/Subvec om.core/MapCursor cljs.core/Range cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueueSeq cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/RedNode cljs.core/ChunkedCons om.core/IndexedCursor cljs.core/ObjMap cljs.core.async.impl.timers/SkipListNode cljs.core/PersistentVector cljs.core/ArrayNodeSeq cljs.core/RSeq cljs.core/PersistentTreeSet cljs.core/LazySeq cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/NodeSeq cljs.core/Cons cljs.core/PersistentTreeMapSeq cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/PersistentTreeMap cljs.core.async.impl.timers/SkipList cljs.core/KeySeq cljs.core/List cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 303, :protocol-symbol true, :name cljs.core/ISeqable}, first {:arglists (quote ([coll])), :name cljs.core/first, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :line 492, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->LazySeq {:arglists (quote ([meta fn s __hash])), :name cljs.core/->LazySeq, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 2141, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, PersistentHashSet {:column 10, :line 6110, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/IEditableCollection cljs.core/ISeqable cljs.core/ISet cljs.core/Object cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 3, :type true, :name cljs.core/PersistentHashSet}, = {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/=, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1} {:tag boolean, :variadic false, :max-fixed-arity 2} {:tag boolean, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic true, :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :line 525, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, array-reduce {:arglists (quote ([arr f] [arr f val] [arr f val idx])), :name cljs.core/array-reduce, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3} {:tag #{nil any}, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 630, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, vector-index-out-of-bounds {:arglists (quote ([i cnt])), :name cljs.core/vector-index-out-of-bounds, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag ignore, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3222, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, memoize {:arglists (quote ([f])), :name cljs.core/memoize, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :line 7292, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -remove-method {:arglists (quote ([mf dispatch-val])), :protocol cljs.core/IMultiFn, :name cljs.core/-remove-method, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 7516, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-float {:arglists (quote ([x])), :name cljs.core/unchecked-float, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 1558, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, PersistentVector {:column 10, :line 3264, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/ICollection cljs.core/IVector cljs.core/IHash cljs.core/IIndexed cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/IKVReduce cljs.core/IEditableCollection cljs.core/IAssociative cljs.core/ISeqable cljs.core/Object cljs.core/IMapEntry cljs.core/IReversible cljs.core/ISequential cljs.core/IReduce cljs.core/IStack cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 6, :type true, :name cljs.core/PersistentVector}, range {:arglists (quote ([] [end] [start end] [start end step])), :name cljs.core/range, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/Range, :variadic false, :max-fixed-arity 0} {:tag cljs.core/Range, :variadic false, :max-fixed-arity 1} {:tag cljs.core/Range, :variadic false, :max-fixed-arity 2} {:tag cljs.core/Range, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :line 6539, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, *clojurescript-version* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 16, :name cljs.core/*clojurescript-version*}, tree-seq {:arglists (quote ([branch? children root])), :name cljs.core/tree-seq, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :line 3037, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, set-validator! {:arglists (quote ([iref val])), :name cljs.core/set-validator!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :line 7110, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -js->clj {:arglists (quote ([x options])), :protocol cljs.core/IEncodeClojure, :name cljs.core/-js->clj, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 7257, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->Box {:arglists (quote ([val])), :name cljs.core/->Box, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/Box, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 4419, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -lookup {:arglists (quote ([o k] [o k not-found])), :protocol cljs.core/ILookup, :name cljs.core/-lookup, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 253, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->EmptyList {:arglists (quote ([meta])), :name cljs.core/->EmptyList, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/EmptyList, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1937, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-divide-int {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/unchecked-divide-int, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :line 1581, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, prefer-method {:arglists (quote ([multifn dispatch-val-x dispatch-val-y])), :name cljs.core/prefer-method, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :line 7603, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, partition-all {:arglists (quote ([n coll] [n step coll])), :name cljs.core/partition-all, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.", :line 6409, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, write-all {:arglists (quote ([writer & ss])), :name cljs.core/write-all, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj-nil, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 6718, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, reduced {:arglists (quote ([x])), :name cljs.core/reduced, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/Reduced, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Wraps x in a way such that a reduce will terminate with the value x", :line 587, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, not-every? {:arglists (quote ([pred coll])), :name cljs.core/not-every?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :line 2607, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, array-map-extend-kv {:arglists (quote ([m k v])), :name cljs.core/array-map-extend-kv, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag array, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4142, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ITransientVector {:impls #{cljs.core/TransientVector}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 357, :protocol-symbol true, :name cljs.core/ITransientVector}, > {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/>, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1} {:tag boolean, :variadic false, :max-fixed-arity 2} {:tag boolean, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic true, :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :line 1499, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, max {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/max, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 1} {:variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "Returns the greatest of the nums.", :line 1527, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, create-node {:arglists (quote ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2])), :name cljs.core/create-node, :protocol-impl nil, :max-fixed-arity 7, :methods ({:tag #{nil cljs.core/HashCollisionNode}, :variadic false, :max-fixed-arity 6} {:tag #{nil cljs.core/HashCollisionNode}, :variadic false, :max-fixed-arity 7}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4897, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, identity {:arglists (quote ([x])), :name cljs.core/identity, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 2636, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ints {:arglists (quote ([x])), :name cljs.core/ints, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1662, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, fnext {:arglists (quote ([coll])), :name cljs.core/fnext, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Same as (first (next x))", :line 808, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, min-key {:arglists (quote ([k x] [k x y] [k x y & more])), :name cljs.core/min-key, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3} {:tag #{nil any}, :variadic true, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns the x for which (k x), a number, is least.", :line 6402, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->BitmapIndexedNode {:arglists (quote ([edit bitmap arr])), :name cljs.core/->BitmapIndexedNode, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/BitmapIndexedNode, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 4482, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, List {:column 10, :line 1880, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IList cljs.core/Object cljs.core/ASeq cljs.core/ISequential cljs.core/INext cljs.core/IReduce cljs.core/IStack cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 5, :type true, :name cljs.core/List}, reset-meta! {:arglists (quote ([iref m])), :name cljs.core/reset-meta!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Atomically resets the metadata for an atom", :line 7134, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, array {:arglists (quote ([var-args])), :name cljs.core/array, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag array, :variadic false, :doc "Creates a new javascript array.\n@param {...*} var_args", :line 162, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag array}, *unchecked-if* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 18, :name cljs.core/*unchecked-if*}, unchecked-add-int {:arglists (quote ([] [x] [x y] [x y & more])), :name cljs.core/unchecked-add-int, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 0} {:variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "Returns the sum of nums. (+) returns 0.", :line 1568, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, subs {:arglists (quote ([s start] [s start end])), :name cljs.core/subs, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :line 1811, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ISet {:impls #{cljs.core/PersistentTreeSet cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 269, :protocol-symbol true, :name cljs.core/ISet}, array-map-index-of-nil? {:arglists (quote ([arr m k])), :name cljs.core/array-map-index-of-nil?, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag number, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4081, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -drop-first {:arglists (quote ([coll])), :protocol cljs.core/IChunk, :name cljs.core/-drop-first, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 367, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ICounted {:impls #{nil cljs.core/PersistentQueue cljs.core/PersistentArrayMap cljs.core/ChunkBuffer cljs.core.async.impl.buffers/FixedBuffer cljs.core/EmptyList cljs.core/Subvec om.core/MapCursor cljs.core/Range cljs.core/PersistentArrayMapSeq cljs.core/IndexedSeq cljs.core/TransientArrayMap cljs.core.async.impl.buffers/DroppingBuffer cljs.core/TransientVector cljs.core/RedNode om.core/IndexedCursor cljs.core.async.impl.buffers/SlidingBuffer cljs.core/ObjMap cljs.core/PersistentVector cljs.core/RSeq cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/ArrayChunk cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/TransientHashMap cljs.core/PersistentTreeMapSeq cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/PersistentTreeMap cljs.core/List cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 229, :protocol-symbol true, :name cljs.core/ICounted}, ->IndexedSeq {:arglists (quote ([arr i])), :name cljs.core/->IndexedSeq, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/IndexedSeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 671, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -methods {:arglists (quote ([mf])), :protocol cljs.core/IMultiFn, :name cljs.core/-methods, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 7516, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ITransientCollection {:impls #{cljs.core/TransientArrayMap cljs.core/TransientVector cljs.core/TransientHashSet cljs.core/TransientHashMap}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 347, :protocol-symbol true, :name cljs.core/ITransientCollection}, -invoke {:arglists (quote ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q s] [this a b c d e f g h i j k l m n o p q s t] [this a b c d e f g h i j k l m n o p q s t rest])), :protocol cljs.core/IFn, :name cljs.core/-invoke, :protocol-impl nil, :max-fixed-arity 21, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1} {:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3} {:tag #{nil any}, :variadic false, :max-fixed-arity 4} {:tag #{nil any}, :variadic false, :max-fixed-arity 5} {:tag #{nil any}, :variadic false, :max-fixed-arity 6} {:tag #{nil any}, :variadic false, :max-fixed-arity 7} {:tag #{nil any}, :variadic false, :max-fixed-arity 8} {:tag #{nil any}, :variadic false, :max-fixed-arity 9} {:tag #{nil any}, :variadic false, :max-fixed-arity 10} {:tag #{nil any}, :variadic false, :max-fixed-arity 11} {:tag #{nil any}, :variadic false, :max-fixed-arity 12} {:tag #{nil any}, :variadic false, :max-fixed-arity 13} {:tag #{nil any}, :variadic false, :max-fixed-arity 14} {:tag #{nil any}, :variadic false, :max-fixed-arity 15} {:tag #{nil any}, :variadic false, :max-fixed-arity 16} {:tag #{nil any}, :variadic false, :max-fixed-arity 17} {:tag #{nil any}, :variadic false, :max-fixed-arity 18} {:tag #{nil any}, :variadic false, :max-fixed-arity 19} {:tag #{nil any}, :variadic false, :max-fixed-arity 20} {:tag #{nil any}, :variadic false, :max-fixed-arity 21}), :column 1, :protocol-inline nil, :variadic false, :line 202, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -deref {:arglists (quote ([o])), :protocol cljs.core/IDeref, :name cljs.core/-deref, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 279, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, *print-fn* {:name cljs.core/*print-fn*, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag ignore, :variadic false, :max-fixed-arity 1}), :dynamic true, :column 1, :protocol-inline nil, :variadic false, :doc "Each runtime environment provides a diffenent way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :line 20, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IStack {:impls #{cljs.core/PersistentQueue cljs.core/EmptyList cljs.core/Subvec cljs.core/RedNode om.core/IndexedCursor cljs.core/PersistentVector cljs.core/BlackNode cljs.core/List}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 272, :protocol-symbol true, :name cljs.core/IStack}, >= {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/>=, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1} {:tag boolean, :variadic false, :max-fixed-arity 2} {:tag boolean, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic true, :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :line 1511, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, hash-imap {:arglists (quote ([m])), :name cljs.core/hash-imap, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 1847, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, reduce-kv {:arglists (quote ([f init coll])), :name cljs.core/reduce-kv, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :line 1429, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, reset! {:arglists (quote ([a new-value])), :name cljs.core/reset!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :line 7065, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, even? {:arglists (quote ([n])), :name cljs.core/even?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if n is even, throws an exception if n is not an integer", :line 2626, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, bit-shift-left {:arglists (quote ([x n])), :name cljs.core/bit-shift-left, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Bitwise shift left", :line 1738, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, new-path {:arglists (quote ([edit level node])), :name cljs.core/new-path, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3196, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, methods {:arglists (quote ([multifn])), :name cljs.core/methods, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :line 7609, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, balance-left {:arglists (quote ([key val ins right])), :name cljs.core/balance-left, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{cljs.core/RedNode cljs.core/BlackNode}, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5316, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, compare {:arglists (quote ([x y])), :name cljs.core/compare, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{number any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :line 1286, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, IMultiFn {:impls #{cljs.core/MultiFn}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 7516, :protocol-symbol true, :name cljs.core/IMultiFn}, string-hash-cache {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 1079, :name cljs.core/string-hash-cache}, PersistentQueueSeq {:column 10, :line 3815, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 4, :type true, :name cljs.core/PersistentQueueSeq}, sorted-set-by {:arglists (quote ([comparator & keys])), :name cljs.core/sorted-set-by, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :line 6333, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -assoc-n! {:arglists (quote ([tcoll n val])), :protocol cljs.core/ITransientVector, :name cljs.core/-assoc-n!, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 357, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, -meta {:arglists (quote ([o])), :protocol cljs.core/IMeta, :name cljs.core/-meta, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag clj-or-nil, :variadic false, :line 285, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj-or-nil}, PersistentArrayMapSeq {:column 10, :line 4156, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/INext cljs.core/IReduce cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 3, :type true, :name cljs.core/PersistentArrayMapSeq}, group-by {:arglists (quote ([f coll])), :name cljs.core/group-by, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :line 7339, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->Subvec {:arglists (quote ([meta v start end __hash])), :name cljs.core/->Subvec, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/Subvec, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 3524, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->UUID {:arglists (quote ([uuid])), :name cljs.core/->UUID, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/UUID, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 7624, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, bitmap-indexed-node-index {:arglists (quote ([bitmap bit])), :name cljs.core/bitmap-indexed-node-index, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4447, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, EmptyList {:column 10, :line 1937, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IList cljs.core/Object cljs.core/ISequential cljs.core/INext cljs.core/IReduce cljs.core/IStack cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 1, :type true, :name cljs.core/EmptyList}, get {:arglists (quote ([o k] [o k not-found])), :name cljs.core/get, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the value mapped to key, not-found or nil if key not present.", :line 953, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, <= {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/<=, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1} {:tag boolean, :variadic false, :max-fixed-arity 2} {:tag boolean, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic true, :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :line 1487, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, mask {:arglists (quote ([hash shift])), :name cljs.core/mask, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4429, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, tree-map-add {:arglists (quote ([comp tree k v found])), :name cljs.core/tree-map-add, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag #{nil cljs.core/RedNode clj-nil}, :variadic false, :max-fixed-arity 5}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5660, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -rest {:arglists (quote ([coll])), :protocol cljs.core/ISeq, :name cljs.core/-rest, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 246, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, ->ExceptionInfo {:arglists (quote ([message data cause])), :name cljs.core/->ExceptionInfo, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/ExceptionInfo, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 7642, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, bytes {:arglists (quote ([x])), :name cljs.core/bytes, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1659, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, regexp? {:arglists (quote ([o])), :name cljs.core/regexp?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 6659, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -chunked-next {:arglists (quote ([coll])), :protocol cljs.core/IChunkedNext, :name cljs.core/-chunked-next, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 374, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, fnil {:arglists (quote ([f x] [f x y] [f x y z])), :name cljs.core/fnil, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag function, :variadic false, :max-fixed-arity 2} {:tag function, :variadic false, :max-fixed-arity 3} {:tag function, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :line 2695, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->PersistentQueueSeq {:arglists (quote ([meta front rear __hash])), :name cljs.core/->PersistentQueueSeq, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/PersistentQueueSeq, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 3815, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, string-hash-cache-count {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 1080, :name cljs.core/string-hash-cache-count}, force {:arglists (quote ([x])), :name cljs.core/force, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :line 7207, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, create-inode-seq {:arglists (quote ([nodes] [nodes i s])), :name cljs.core/create-inode-seq, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{cljs.core/NodeSeq clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{cljs.core/NodeSeq clj-nil}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4963, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, partial {:arglists (quote ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3] [f arg1 arg2 arg3 & more])), :name cljs.core/partial, :protocol-impl nil, :max-fixed-arity 4, :methods ({:variadic false, :max-fixed-arity 1} {:tag function, :variadic false, :max-fixed-arity 2} {:tag function, :variadic false, :max-fixed-arity 3} {:tag function, :variadic false, :max-fixed-arity 4} {:tag function, :variadic true, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic true, :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :line 2681, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -disjoin {:arglists (quote ([coll v])), :protocol cljs.core/ISet, :name cljs.core/-disjoin, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 269, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, set-from-indexed-seq {:arglists (quote ([iseq])), :name cljs.core/set-from-indexed-seq, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 6301, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, BlackNode {:protocols #{cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/ICollection cljs.core/IVector cljs.core/IHash cljs.core/IIndexed cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/IAssociative cljs.core/ISeqable cljs.core/Object cljs.core/IMapEntry cljs.core/ISequential cljs.core/IReduce cljs.core/IStack cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 5, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 5417, :declared true, :name cljs.core/BlackNode}, comparator {:arglists (quote ([pred])), :name cljs.core/comparator, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns an JavaScript compatible comparator based upon pred.", :line 7682, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -conj! {:arglists (quote ([tcoll val])), :protocol cljs.core/ITransientCollection, :name cljs.core/-conj!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 347, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, array-seq {:arglists (quote ([array] [array i])), :name cljs.core/array-seq, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{cljs.core/IndexedSeq clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{cljs.core/IndexedSeq clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 740, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pos? {:arglists (quote ([n])), :name cljs.core/pos?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if num is greater than zero, else false", :line 1774, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, ISeq {:impls #{cljs.core/PersistentQueue cljs.core/EmptyList cljs.core/ValSeq cljs.core/Range cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueueSeq cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/ArrayNodeSeq cljs.core/RSeq cljs.core/LazySeq cljs.core/NodeSeq cljs.core/Cons cljs.core/PersistentTreeMapSeq cljs.core/KeySeq cljs.core/List}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 246, :protocol-symbol true, :name cljs.core/ISeq}, char {:arglists (quote ([x])), :name cljs.core/char, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Coerce to char", :line 1543, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, take-while {:arglists (quote ([pred coll])), :name cljs.core/take-while, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.", :line 6419, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, balance-right {:arglists (quote ([key val left ins])), :name cljs.core/balance-right, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{cljs.core/RedNode cljs.core/BlackNode}, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5341, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IVector {:impls #{cljs.core/Subvec cljs.core/RedNode cljs.core/PersistentVector cljs.core/BlackNode}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 276, :protocol-symbol true, :name cljs.core/IVector}, IChunkedNext {:impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 374, :protocol-symbol true, :name cljs.core/IChunkedNext}, underive {:arglists (quote ([tag parent] [h tag parent])), :name cljs.core/underive, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :line 7443, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ex-message {:arglists (quote ([ex])), :name cljs.core/ex-message, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :line 7665, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ancestors {:arglists (quote ([tag] [h tag])), :name cljs.core/ancestors, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :line 7392, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, hash-combine {:arglists (quote ([seed hash])), :name cljs.core/hash-combine, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 1831, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IEquiv {:impls #{cljs.core/PersistentQueue cljs.core/PersistentArrayMap cljs.core/Atom number cljs.core/EmptyList cljs.core/ValSeq cljs.core/Subvec om.core/MapCursor cljs.core/Range default cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueueSeq cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/RedNode cljs.core/ChunkedCons om.core/IndexedCursor cljs.core/Keyword cljs.core/ObjMap cljs.core/PersistentVector cljs.core/ArrayNodeSeq cljs.core/RSeq cljs.core/PersistentTreeSet cljs.core/NeverEquiv cljs.core/LazySeq cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/NodeSeq cljs.core/Cons cljs.core/UUID cljs.core/PersistentTreeMapSeq cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/Symbol cljs.core/PersistentTreeMap js/Date cljs.core/KeySeq cljs.core/List cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 297, :protocol-symbol true, :name cljs.core/IEquiv}, persistent! {:arglists (quote ([tcoll])), :name cljs.core/persistent!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 2497, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, partition {:arglists (quote ([n coll] [n step coll] [n step pad coll])), :name cljs.core/partition, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 3} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :line 3095, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, map-indexed {:arglists (quote ([f coll])), :name cljs.core/map-indexed, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :line 2718, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ChunkBuffer {:column 10, :line 2206, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICounted cljs.core/Object}, :num-fields 2, :type true, :name cljs.core/ChunkBuffer}, contains? {:arglists (quote ([coll v])), :name cljs.core/contains?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :line 1241, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, interpose {:arglists (quote ([sep coll])), :name cljs.core/interpose, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy seq of the elements of coll separated by sep", :line 2986, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, chunk {:arglists (quote ([b])), :name cljs.core/chunk, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 2323, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ifn? {:arglists (quote ([f])), :name cljs.core/ifn?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 1230, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, remove-pair {:arglists (quote ([arr i])), :name cljs.core/remove-pair, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag array, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4441, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IWithMeta {:impls #{cljs.core/PersistentQueue cljs.core/PersistentArrayMap cljs.core.async/t10545 cljs.core.async/t10501 cljs.core.async/t10542 cljs.core.async/t10517 cljs.core/EmptyList cljs.core/ValSeq cljs.core.async/t10504 cljs.core.async/t10548 cljs.core/Subvec cljs.core/Range cljs.core.async/t11729 cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueueSeq cljs.core.async.impl.channels/t13097 cljs.core.async/t10554 cljs.core/ChunkedSeq cljs.core/RedNode cljs.core/t9562 cljs.core.async.impl.ioc-helpers/t13105 cljs.core.async/t11838 cljs.core/ChunkedCons cljs.core.async/t12103 cljs.core.async.impl.ioc-helpers/t13108 cljs.core.async/t10514 cljs.core.async/t11449 cljs.core/ObjMap cljs.core/PersistentVector cljs.core/t9556 cljs.core.async/t10523 cljs.core/ArrayNodeSeq cljs.core.async/t10520 cljs.core/RSeq cljs.core/PersistentTreeSet cljs.core.async/t10539 cljs.core.async/t11979 cljs.core/LazySeq cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/NodeSeq cljs.core.async/t10551 cljs.core.async/t10533 cljs.core.async/t11226 cljs.core/Cons cljs.core/PersistentTreeMapSeq cljs.core.async.impl.channels/t13094 cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/Symbol cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/List cljs.core.async/t10536 cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 288, :protocol-symbol true, :name cljs.core/IWithMeta}, enable-console-print! {:arglists (quote ([])), :name cljs.core/enable-console-print!, :protocol-impl nil, :max-fixed-arity 0, :methods ({:variadic false, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic false, :doc "Set *print-fn* to console.log", :line 49, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, obj-map->hash-map {:arglists (quote ([m k v])), :name cljs.core/obj-map->hash-map, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{clj clj-nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3947, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ICloneable {:impls #{cljs.core/PersistentQueue cljs.core/PersistentArrayMap cljs.core/EmptyList cljs.core/Subvec om.core/MapCursor cljs.core/Range cljs.core/IndexedSeq om.core/IndexedCursor cljs.core/Keyword cljs.core/PersistentVector cljs.core/RSeq cljs.core/PersistentTreeSet cljs.core/PersistentHashMap cljs.core/Cons cljs.core/UUID cljs.core/Symbol cljs.core/PersistentTreeMap cljs.core/List cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 226, :protocol-symbol true, :name cljs.core/ICloneable}, IMeta {:impls #{cljs.core/PersistentQueue cljs.core/PersistentArrayMap cljs.core/Atom cljs.core.async/t10545 cljs.core.async/t10501 cljs.core.async/t10542 cljs.core.async/t10517 cljs.core/EmptyList cljs.core/ValSeq cljs.core.async/t10504 cljs.core.async/t10548 cljs.core/Subvec cljs.core/Range cljs.core.async/t11729 cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueueSeq cljs.core.async.impl.channels/t13097 cljs.core.async/t10554 cljs.core/RedNode cljs.core/t9562 cljs.core.async.impl.ioc-helpers/t13105 cljs.core.async/t11838 cljs.core/ChunkedCons cljs.core.async/t12103 cljs.core.async.impl.ioc-helpers/t13108 cljs.core.async/t10514 cljs.core.async/t11449 cljs.core/ObjMap cljs.core/PersistentVector cljs.core/t9556 cljs.core.async/t10523 cljs.core/ArrayNodeSeq cljs.core.async/t10520 cljs.core/RSeq cljs.core/PersistentTreeSet cljs.core.async/t10539 cljs.core.async/t11979 cljs.core/LazySeq cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/NodeSeq cljs.core.async/t10551 function cljs.core.async/t10533 cljs.core.async/t11226 cljs.core/Cons cljs.core/PersistentTreeMapSeq cljs.core.async.impl.channels/t13094 cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/Symbol cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/List cljs.core.async/t10536 cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 285, :protocol-symbol true, :name cljs.core/IMeta}, apply {:arglists (quote ([f args] [f x args] [f x y args] [f x y z args] [f a b c d & args])), :name cljs.core/apply, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3} {:tag #{nil any}, :variadic false, :max-fixed-arity 4} {:tag #{nil any}, :variadic false, :max-fixed-arity 5} {:tag #{nil any}, :variadic true, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic true, :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :line 2522, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, swap! {:arglists (quote ([a f] [a f x] [a f x y] [a f x y z] [a f x y z & more])), :name cljs.core/swap!, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3} {:tag any, :variadic false, :max-fixed-arity 4} {:tag any, :variadic false, :max-fixed-arity 5} {:tag any, :variadic true, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic true, :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :line 7078, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, truth_ {:arglists (quote ([x])), :name cljs.core/truth_, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Internal - do not use!", :line 69, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, array-copy {:arglists (quote ([from i to j len])), :name cljs.core/array-copy, :protocol-impl nil, :max-fixed-arity 5, :methods ({:variadic false, :max-fixed-arity 5}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 1184, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->PersistentArrayMapSeq {:arglists (quote ([arr i _meta])), :name cljs.core/->PersistentArrayMapSeq, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/PersistentArrayMapSeq, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 4156, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, subvec {:arglists (quote ([v start] [v start end])), :name cljs.core/subvec, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/Subvec, :variadic false, :max-fixed-arity 2} {:tag cljs.core/Subvec, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :line 3619, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, rest {:arglists (quote ([coll])), :name cljs.core/rest, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag seq, :variadic false, :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :line 503, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag seq}, -val {:arglists (quote ([coll])), :protocol cljs.core/IMapEntry, :name cljs.core/-val, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 265, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, keyword {:arglists (quote ([name] [ns name])), :name cljs.core/keyword, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil cljs.core/Keyword clj-nil}, :variadic false, :max-fixed-arity 1} {:tag cljs.core/Keyword, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :line 2126, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -assoc-n {:arglists (quote ([coll n val])), :protocol cljs.core/IVector, :name cljs.core/-assoc-n, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 276, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, ->PersistentTreeMapSeq {:arglists (quote ([meta stack ascending? cnt __hash])), :name cljs.core/->PersistentTreeMapSeq, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/PersistentTreeMapSeq, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 5262, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IComparable {:impls #{cljs.core/Subvec cljs.core/Keyword cljs.core/PersistentVector cljs.core/Symbol}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 364, :protocol-symbol true, :name cljs.core/IComparable}, indexed? {:arglists (quote ([x])), :name cljs.core/indexed?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if coll implements nth in constant time", :line 667, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, int {:arglists (quote ([x])), :name cljs.core/int, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Coerce to int by stripping decimal places.", :line 1638, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, quote-string {:arglists (quote ([s])), :name cljs.core/quote-string, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 6739, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->Cons {:arglists (quote ([meta first rest __hash])), :name cljs.core/->Cons, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/Cons, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 2017, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, mod {:arglists (quote ([n d])), :name cljs.core/mod, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Modulus of num and div. Truncates toward negative infinity.", :line 1672, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, nfirst {:arglists (quote ([coll])), :name cljs.core/nfirst, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag seq, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Same as (next (first x))", :line 803, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, Fn {:impls #{cljs.core/t9562 cljs.core/t9556 function}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 199, :protocol-symbol true, :name cljs.core/Fn}, nthnext {:arglists (quote ([coll n])), :name cljs.core/nthnext, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag seq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the nth next of coll, (seq coll) when n is 0.", :line 1787, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pv-fresh-node {:arglists (quote ([edit])), :name cljs.core/pv-fresh-node, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/VectorNode, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3178, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, tree-map-seq-push {:arglists (quote ([node stack ascending?])), :name cljs.core/tree-map-seq-push, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5255, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, array-for {:arglists (quote ([pv i])), :name cljs.core/array-for, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3225, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->List {:arglists (quote ([meta first rest count __hash])), :name cljs.core/->List, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/List, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 1880, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, array-map {:arglists (quote ([& keyvals])), :name cljs.core/array-map, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag cljs.core/PersistentArrayMap, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :line 5902, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-char {:arglists (quote ([x])), :name cljs.core/unchecked-char, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 1556, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, -count {:arglists (quote ([coll])), :protocol cljs.core/ICounted, :name cljs.core/-count, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 229, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, IIndexed {:impls #{cljs.core/Subvec cljs.core/Range cljs.core/IndexedSeq cljs.core/TransientVector cljs.core/RedNode om.core/IndexedCursor cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/BlackNode}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 241, :protocol-symbol true, :name cljs.core/IIndexed}, tree-map-kv-reduce {:arglists (quote ([node f init])), :name cljs.core/tree-map-kv-reduce, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5401, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, dec {:arglists (quote ([x])), :name cljs.core/dec, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a number one less than num.", :line 1523, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, undefined? {:arglists (quote ([x])), :name cljs.core/undefined?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 1212, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, println {:arglists (quote ([& objs])), :name cljs.core/println, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag clj-nil, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "Same as print followed by (newline)", :line 6890, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, array-copy-downward {:arglists (quote ([from i to j len])), :name cljs.core/array-copy-downward, :protocol-impl nil, :max-fixed-arity 5, :methods ({:variadic false, :max-fixed-arity 5}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 1192, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, aget {:arglists (quote ([array i] [array i & idxs])), :name cljs.core/aget, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2} {:tag any, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns the value at the index.", :line 170, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->TransientHashMap {:arglists (quote ([edit root count has-nil? nil-val])), :name cljs.core/->TransientHashMap, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/TransientHashMap, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :line 5150, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pr {:arglists (quote ([& objs])), :name cljs.core/pr, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag clj-nil, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :line 6870, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, drop {:arglists (quote ([n coll])), :name cljs.core/drop, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of all but the first n items in coll.", :line 2905, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -conj {:arglists (quote ([coll o])), :protocol cljs.core/ICollection, :name cljs.core/-conj, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 235, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, *print-dup* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 36, :dynamic true, :name cljs.core/*print-dup*}, IWriter {:impls #{cljs.core/StringBufferWriter}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 324, :protocol-symbol true, :name cljs.core/IWriter}, array? {:arglists (quote ([x])), :name cljs.core/array?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 88, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, IEmptyableCollection {:impls #{cljs.core/PersistentQueue cljs.core/PersistentArrayMap cljs.core/EmptyList cljs.core/ValSeq cljs.core/Subvec cljs.core/Range cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueueSeq cljs.core/IndexedSeq cljs.core/ChunkedSeq cljs.core/RedNode cljs.core/ChunkedCons cljs.core/ObjMap cljs.core/PersistentVector cljs.core/ArrayNodeSeq cljs.core/RSeq cljs.core/PersistentTreeSet cljs.core/LazySeq cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/NodeSeq cljs.core/Cons cljs.core/PersistentTreeMapSeq cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/List cljs.core/PersistentHashSet}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 232, :protocol-symbol true, :name cljs.core/IEmptyableCollection}, aclone {:arglists (quote ([arr])), :name cljs.core/aclone, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag array, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a javascript array, cloned from the passed in array", :line 153, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, UUID {:column 10, :line 7624, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :num-fields 1, :type true, :name cljs.core/UUID}, pop {:arglists (quote ([coll])), :name cljs.core/pop, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{clj clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :line 1056, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->ChunkBuffer {:arglists (quote ([buf end])), :name cljs.core/->ChunkBuffer, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/ChunkBuffer, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 2206, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, atom {:arglists (quote ([x] [x & {:keys [meta validator]}])), :name cljs.core/atom, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/Atom, :variadic false, :max-fixed-arity 1} {:tag cljs.core/Atom, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :line 7048, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->PersistentTreeSet {:arglists (quote ([meta tree-map __hash])), :name cljs.core/->PersistentTreeSet, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core/PersistentTreeSet, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 6225, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, bit-shift-right {:arglists (quote ([x n])), :name cljs.core/bit-shift-right, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Bitwise shift right", :line 1742, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, not-native {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 74, :name cljs.core/not-native}, delay? {:arglists (quote ([x])), :name cljs.core/delay?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "returns true if x is a Delay created with delay", :line 7203, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, Cons {:column 10, :line 2017, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ISeqable cljs.core/IList cljs.core/Object cljs.core/ASeq cljs.core/ISequential cljs.core/INext cljs.core/IReduce cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 4, :type true, :name cljs.core/Cons}, -dissoc! {:arglists (quote ([tcoll key])), :protocol cljs.core/ITransientMap, :name cljs.core/-dissoc!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 354, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, realized? {:arglists (quote ([d])), :name cljs.core/realized?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :line 7214, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, disj {:arglists (quote ([coll] [coll k] [coll k & ks])), :name cljs.core/disj, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 1} {:tag #{clj clj-nil}, :variadic false, :max-fixed-arity 2} {:tag #{clj clj-nil}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic true, :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :line 1064, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, *print-readably* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 34, :dynamic true, :name cljs.core/*print-readably*}, merge-with {:arglists (quote ([f & maps])), :name cljs.core/merge-with, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :line 6076, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, take-nth {:arglists (quote ([n coll])), :name cljs.core/take-nth, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy seq of every nth item in coll.", :line 6548, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->t9562 {:arglists (quote ([meta o with-meta meta9563])), :name cljs.core/->t9562, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/t9562, :variadic false, :max-fixed-arity 4}), :column 7, :protocol-inline nil, :variadic false, :line 1033, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IChunkedSeq {:impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 370, :protocol-symbol true, :name cljs.core/IChunkedSeq}, *print-meta* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 35, :dynamic true, :name cljs.core/*print-meta*}, double {:arglists (quote ([x])), :name cljs.core/double, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 1553, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, array-map-index-of-symbol? {:arglists (quote ([arr m k])), :name cljs.core/array-map-index-of-symbol?, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag number, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 4100, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -hash {:arglists (quote ([o])), :protocol cljs.core/IHash, :name cljs.core/-hash, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 300, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, obj-map {:arglists (quote ([& keyvals])), :name cljs.core/obj-map, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :line 5908, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, take-last {:arglists (quote ([n coll])), :name cljs.core/take-last, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag seq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :line 2920, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, take {:arglists (quote ([n coll])), :name cljs.core/take, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.", :line 2896, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-byte {:arglists (quote ([x])), :name cljs.core/unchecked-byte, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :line 1555, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, -persistent! {:arglists (quote ([tcoll])), :protocol cljs.core/ITransientCollection, :name cljs.core/-persistent!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 347, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, check-string-hash-cache {:arglists (quote ([k])), :name cljs.core/check-string-hash-cache, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 1088, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, apply-to {:arglists (quote ([f argc args])), :name cljs.core/apply-to, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 2519, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, obj-clone {:arglists (quote ([obj ks])), :name cljs.core/obj-clone, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag object, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3961, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, IList {:impls #{cljs.core/EmptyList cljs.core/Cons cljs.core/List}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 309, :protocol-symbol true, :name cljs.core/IList}, set? {:arglists (quote ([x])), :name cljs.core/set?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if x satisfies ISet", :line 1130, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, make-array {:arglists (quote ([size] [type size])), :name cljs.core/make-array, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag array, :variadic false, :max-fixed-arity 1} {:tag array, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag array, :variadic false, :line 147, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag array}, rand-nth {:arglists (quote ([coll])), :name cljs.core/rand-nth, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :line 7332, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, juxt {:arglists (quote ([f] [f g] [f g h] [f g h & fs])), :name cljs.core/juxt, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag function, :variadic false, :max-fixed-arity 1} {:tag function, :variadic false, :max-fixed-arity 2} {:tag function, :variadic false, :max-fixed-arity 3} {:tag function, :variadic true, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic true, :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :line 6594, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, alength {:arglists (quote ([array])), :name cljs.core/alength, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag number, :variadic false, :doc "Returns the length of the array. Works on arrays of all types.", :line 184, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, chunk-first {:arglists (quote ([s])), :name cljs.core/chunk-first, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 2326, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, tree-map-append {:arglists (quote ([left right])), :name cljs.core/tree-map-append, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil cljs.core/RedNode cljs.core/BlackNode}, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 5679, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, to-array {:arglists (quote ([s])), :name cljs.core/to-array, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag array, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Naive impl of to-array as a start.", :line 2339, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, hash-map {:arglists (quote ([& keyvals])), :name cljs.core/hash-map, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag clj, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :line 5893, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, Range {:column 10, :line 6464, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IIndexed cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/INext cljs.core/IReduce cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 5, :type true, :name cljs.core/Range}, bit-and-not {:arglists (quote ([x y])), :name cljs.core/bit-and-not, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Bitwise and", :line 1710, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, compare-and-set! {:arglists (quote ([a oldval newval])), :name cljs.core/compare-and-set!, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag boolean, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :line 7094, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -pop! {:arglists (quote ([tcoll])), :protocol cljs.core/ITransientVector, :name cljs.core/-pop!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 357, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, ITransientAssociative {:impls #{cljs.core/TransientArrayMap cljs.core/TransientVector cljs.core/TransientHashMap}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 351, :protocol-symbol true, :name cljs.core/ITransientAssociative}, type {:arglists (quote ([x])), :name cljs.core/type, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 127, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -clone {:arglists (quote ([value])), :protocol cljs.core/ICloneable, :name cljs.core/-clone, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 226, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, repeatedly {:arglists (quote ([f] [n f])), :name cljs.core/repeatedly, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :line 2960, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, trampoline {:arglists (quote ([f] [f & args])), :name cljs.core/trampoline, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :line 7306, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, remove {:arglists (quote ([pred coll])), :name cljs.core/remove, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.", :line 3031, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, reset-cache {:arglists (quote ([method-cache method-table cached-hierarchy hierarchy])), :name cljs.core/reset-cache, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag any, :variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 7464, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, find {:arglists (quote ([coll k])), :name cljs.core/find, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{cljs.core/IVector clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the map entry for key, or nil if key not present.", :line 1252, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, do-assoc {:arglists (quote ([pv level node i val])), :name cljs.core/do-assoc, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag cljs.core/VectorNode, :variadic false, :max-fixed-arity 5}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 3237, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, unchecked-substract-int {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/unchecked-substract-int, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :line 1626, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, pr-str* {:arglists (quote ([obj])), :name cljs.core/pr-str*, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :line 388, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, coll? {:arglists (quote ([x])), :name cljs.core/coll?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if x satisfies ICollection", :line 1123, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, drop-while {:arglists (quote ([pred coll])), :name cljs.core/drop-while, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of the items in coll starting from the first\n  item for which (pred item) returns nil.", :line 2929, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, not-empty {:arglists (quote ([coll])), :name cljs.core/not-empty, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "If coll is empty, returns nil, else coll", :line 2594, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, flatten {:arglists (quote ([x])), :name cljs.core/flatten, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :line 3052, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ex-data {:arglists (quote ([ex])), :name cljs.core/ex-data, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :line 7657, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, pr-writer {:arglists (quote ([obj writer opts])), :name cljs.core/pr-writer, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :line 6748, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -reduce {:arglists (quote ([coll f] [coll f start])), :protocol cljs.core/IReduce, :name cljs.core/-reduce, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 291, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, println-str {:arglists (quote ([& objs])), :name cljs.core/println-str, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag #{nil string}, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "println to a string, returning it", :line 6897, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ArrayNodeSeq {:column 10, :line 4980, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/IReduce cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 5, :type true, :name cljs.core/ArrayNodeSeq}, IMap {:impls #{cljs.core/PersistentArrayMap om.core/MapCursor cljs.core/ObjMap cljs.core/PersistentHashMap cljs.core.async.impl.ioc-helpers/ExceptionFrame cljs.core/PersistentTreeMap}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 261, :protocol-symbol true, :name cljs.core/IMap}, list {:arglists (quote ([& xs])), :name cljs.core/list, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag not-native, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :line 2002, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ValSeq {:column 10, :line 6004, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/INext cljs.core/IReduce cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 2, :type true, :name cljs.core/ValSeq}, chunk-next {:arglists (quote ([s])), :name cljs.core/chunk-next, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil seq any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 2332, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, every? {:arglists (quote ([pred coll])), :name cljs.core/every?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :line 2598, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, flush {:arglists (quote ([])), :name cljs.core/flush, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic false, :line 6726, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->ChunkedSeq {:arglists (quote ([vec node i off meta __hash])), :name cljs.core/->ChunkedSeq, :protocol-impl nil, :max-fixed-arity 6, :methods ({:tag cljs.core/ChunkedSeq, :variadic false, :max-fixed-arity 6}), :column 1, :protocol-inline nil, :variadic false, :line 3441, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, Reduced {:column 10, :line 583, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IDeref}, :num-fields 1, :type true, :name cljs.core/Reduced}, sort {:arglists (quote ([coll] [comp coll])), :name cljs.core/sort, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{seq cljs.core/IList}, :variadic false, :max-fixed-arity 1} {:tag #{seq cljs.core/IList}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :line 1338, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -pop {:arglists (quote ([coll])), :protocol cljs.core/IStack, :name cljs.core/-pop, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 272, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}, dissoc {:arglists (quote ([coll] [coll k] [coll k & ks])), :name cljs.core/dissoc, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 1} {:tag #{clj clj-nil}, :variadic false, :max-fixed-arity 2} {:tag #{clj clj-nil}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic true, :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :line 1010, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, not {:arglists (quote ([x])), :name cljs.core/not, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Returns true if x is logical false, false otherwise.", :line 94, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag boolean}, IDerefWithTimeout {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 282, :protocol-symbol true, :name cljs.core/IDerefWithTimeout}, get-method {:arglists (quote ([multifn dispatch-val])), :name cljs.core/get-method, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :line 7613, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, sorted-set {:arglists (quote ([& keys])), :name cljs.core/sorted-set, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag #{nil any}, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns a new sorted set with supplied keys.", :line 6328, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, merge {:arglists (quote ([& maps])), :name cljs.core/merge, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag #{nil clj-nil any}, :variadic true, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic true, :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :line 6068, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, subseq {:arglists (quote ([sc test key] [sc start-test start-key end-test end-key])), :name cljs.core/subseq, :protocol-impl nil, :max-fixed-arity 5, :methods ({:tag #{clj seq cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 3} {:tag #{cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 5}), :column 1, :protocol-inline nil, :variadic false, :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :line 6434, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ObjMap {:column 10, :line 3971, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/IKVReduce cljs.core/IEditableCollection cljs.core/IAssociative cljs.core/ISeqable cljs.core/Object cljs.core/IMap cljs.core/IWithMeta cljs.core/ILookup}, :num-fields 5, :type true, :name cljs.core/ObjMap}, missing-protocol {:arglists (quote ([proto obj])), :name cljs.core/missing-protocol, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag js/Error, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 131, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, min {:arglists (quote ([x] [x y] [x y & more])), :name cljs.core/min, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 1} {:variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag number, :variadic true, :doc "Returns the least of the nums.", :line 1534, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag number}, Symbol {:protocols #{cljs.core/INamed cljs.core/ICloneable cljs.core/IMeta cljs.core/IFn cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :num-fields 5, :type true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 10, :line 423, :declared true, :name cljs.core/Symbol}, -global-hierarchy {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :column 1, :line 7354, :private true, :name cljs.core/-global-hierarchy}, bit-test {:arglists (quote ([x n])), :name cljs.core/bit-test, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Test bit at index n", :line 1733, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, keep {:arglists (quote ([f coll])), :name cljs.core/keep, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :line 2737, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, disj! {:arglists (quote ([tcoll val])), :name cljs.core/disj!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 2512, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, VectorNode {:column 10, :line 3176, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{}, :num-fields 2, :type true, :name cljs.core/VectorNode}, meta {:arglists (quote ([o])), :name cljs.core/meta, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{clj-nil clj-or-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns the metadata of obj, returns nil if there is no metadata.", :line 1042, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, ->Delay {:arglists (quote ([state f])), :name cljs.core/->Delay, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core/Delay, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 7191, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -write {:arglists (quote ([writer s])), :protocol cljs.core/IWriter, :name cljs.core/-write, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 324, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -name {:arglists (quote ([x])), :protocol cljs.core/INamed, :name cljs.core/-name, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag string, :variadic false, :line 377, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag string}, PersistentTreeMapSeq {:column 10, :line 5262, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :protocols #{cljs.core/IMeta cljs.core/IEquiv cljs.core/ICollection cljs.core/IHash cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/Object cljs.core/ISequential cljs.core/IReduce cljs.core/IWithMeta cljs.core/ISeq}, :num-fields 5, :type true, :name cljs.core/PersistentTreeMapSeq}, hash-iset {:arglists (quote ([s])), :name cljs.core/hash-iset, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 1857, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, prim-seq {:arglists (quote ([prim] [prim i])), :name cljs.core/prim-seq, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{cljs.core/IndexedSeq clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{cljs.core/IndexedSeq clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 733, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs"}, -with-meta {:arglists (quote ([o meta])), :protocol cljs.core/IWithMeta, :name cljs.core/-with-meta, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :ret-tag clj, :variadic false, :line 288, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core.cljs", :tag clj}}, :require-macros nil, :excludes #{}, :imports nil, :doc nil, :uses nil}, cljs.core.async.impl.channels {:use-macros nil, :requires {buffers cljs.core.async.impl.buffers, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, impl cljs.core.async.impl.protocols}, :name cljs.core.async.impl.channels, :defs {box {:arglists (quote ([val])), :name cljs.core.async.impl.channels/box, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.channels/t13097, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 16, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs"}, MAX_DIRTY {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs", :column 1, :line 25, :const true, :name cljs.core.async.impl.channels/MAX_DIRTY}, ->PutBox {:arglists (quote ([handler val])), :name cljs.core.async.impl.channels/->PutBox, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async.impl.channels/PutBox, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 20, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs"}, t13094 {:column 3, :line 17, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs", :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :num-fields 3, :type true, :name cljs.core.async.impl.channels/t13094}, PutBox {:column 10, :line 20, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs", :protocols #{}, :num-fields 2, :type true, :name cljs.core.async.impl.channels/PutBox}, t13097 {:column 3, :line 17, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs", :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :num-fields 3, :type true, :name cljs.core.async.impl.channels/t13097}, ->t13094 {:arglists (quote ([val box meta13095])), :name cljs.core.async.impl.channels/->t13094, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/t13094, :variadic false, :max-fixed-arity 3}), :column 3, :protocol-inline nil, :variadic false, :line 17, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs"}, ->ManyToManyChannel {:arglists (quote ([takes dirty-takes puts dirty-puts buf closed])), :name cljs.core.async.impl.channels/->ManyToManyChannel, :protocol-impl nil, :max-fixed-arity 6, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 6}), :column 1, :protocol-inline nil, :variadic false, :line 27, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs"}, ManyToManyChannel {:column 10, :line 27, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs", :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :num-fields 6, :type true, :name cljs.core.async.impl.channels/ManyToManyChannel}, ->t13097 {:arglists (quote ([val box meta13098])), :name cljs.core.async.impl.channels/->t13097, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/t13097, :variadic false, :max-fixed-arity 3}), :column 3, :protocol-inline nil, :variadic false, :line 17, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs"}, put-active? {:arglists (quote ([box])), :name cljs.core.async.impl.channels/put-active?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 22, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs"}, chan {:arglists (quote ([buf])), :name cljs.core.async.impl.channels/chan, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 110, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/channels.cljs"}}, :require-macros nil, :excludes #{}, :imports nil, :doc nil, :uses nil}, cljs.core.async.impl.dispatch {:use-macros nil, :requires {cljs.core.async.impl.buffers cljs.core.async.impl.buffers, buffers cljs.core.async.impl.buffers}, :name cljs.core.async.impl.dispatch, :defs {queued? {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/dispatch.cljs", :column 1, :line 7, :boolean true, :name cljs.core.async.impl.dispatch/queued?}, queue-delay {:arglists (quote ([f delay])), :name cljs.core.async.impl.dispatch/queue-delay, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 45, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/dispatch.cljs"}, run {:arglists (quote ([f])), :name cljs.core.async.impl.dispatch/run, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 41, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/dispatch.cljs"}, running? {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/dispatch.cljs", :column 1, :line 6, :boolean true, :name cljs.core.async.impl.dispatch/running?}, queue-dispatcher {:arglists (quote ([])), :name cljs.core.async.impl.dispatch/queue-dispatcher, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic false, :line 32, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/dispatch.cljs"}, tasks {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/dispatch.cljs", :column 1, :line 5, :name cljs.core.async.impl.dispatch/tasks}, message-channel {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/dispatch.cljs", :column 1, :line 4, :name cljs.core.async.impl.dispatch/message-channel}, process-messages {:arglists (quote ([])), :name cljs.core.async.impl.dispatch/process-messages, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag #{clj-nil any}, :variadic false, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic false, :line 13, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/dispatch.cljs"}, TASK_BATCH_SIZE {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/dispatch.cljs", :column 1, :line 9, :name cljs.core.async.impl.dispatch/TASK_BATCH_SIZE}}, :require-macros nil, :excludes #{}, :imports nil, :doc nil, :uses nil}, cljs-app.js-prot {:use-macros nil, :requires {clojure.string clojure.string, string clojure.string}, :name cljs-app.js-prot, :defs {dbg {:arglists (quote ([m])), :name cljs-app.js-prot/dbg, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 24, :fn-var true, :file "src-cljs/cljs_app/js_prot.cljs"}, dbg-clj {:arglists (quote ([m])), :name cljs-app.js-prot/dbg-clj, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 19, :fn-var true, :file "src-cljs/cljs_app/js_prot.cljs"}, log {:arglists (quote ([arg] [arg & args])), :name cljs-app.js-prot/log, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 14, :fn-var true, :file "src-cljs/cljs_app/js_prot.cljs"}, strkey {:arglists (quote ([x])), :name cljs-app.js-prot/strkey, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil string}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Helper fn that converts keywords into strings", :line 7, :fn-var true, :file "src-cljs/cljs_app/js_prot.cljs"}, unwrap {:arglists (quote ([o])), :protocol cljs-app.js-prot/Wrapped, :name cljs-app.js-prot/unwrap, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 4, :fn-var true, :file "src-cljs/cljs_app/js_prot.cljs"}, Wrapped {:impls #{}, :file "src-cljs/cljs_app/js_prot.cljs", :column 1, :line 4, :protocol-symbol true, :name cljs-app.js-prot/Wrapped}}, :require-macros nil, :excludes #{}, :imports nil, :doc nil, :uses nil}, om.core {:use-macros {component om.core, tag om.core, allow-reads om.core, pure om.core, safe-transact! om.core, check om.core, cursor-check om.core, safe-update! om.core}, :requires {om.dom om.dom, dom om.dom}, :name om.core, :defs {->IndexedCursor {:arglists (quote ([value state path])), :name om.core/->IndexedCursor, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag om.core/IndexedCursor, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 219, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, ->MapCursor {:arglists (quote ([value state path])), :name om.core/->MapCursor, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag om.core/MapCursor, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 173, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, *read-enabled* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 8, :tag boolean, :dynamic true, :name om.core/*read-enabled*}, did-mount {:arglists (quote ([this node])), :protocol om.core/IDidMount, :name om.core/did-mount, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 24, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, transact! {:arglists (quote ([cursor f] [cursor korks f] [cursor korks f a] [cursor korks f a b] [cursor korks f a b c] [cursor korks f a b c d] [cursor korks f a b c d & args])), :name om.core/transact!, :protocol-impl nil, :max-fixed-arity 7, :methods ({:variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3} {:variadic false, :max-fixed-arity 4} {:variadic false, :max-fixed-arity 5} {:variadic false, :max-fixed-arity 6} {:variadic false, :max-fixed-arity 7} {:variadic true, :max-fixed-arity 7}), :column 1, :protocol-inline nil, :variadic true, :doc "Given a cursor, an optional list of keys ks, mutate the tree at the\n   path specified by the cursor + the optional keys by applying f to the\n   specified value in the tree. An Om re-render will be triggered.", :line 408, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, should-update {:arglists (quote ([this next-props next-state])), :protocol om.core/IShouldUpdate, :name om.core/should-update, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 18, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, value {:arglists (quote ([cursor])), :name om.core/value, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 167, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, IToCursor {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 47, :protocol-symbol true, :name om.core/IToCursor}, will-update {:arglists (quote ([this next-props next-state])), :protocol om.core/IWillUpdate, :name om.core/will-update, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 30, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, get-node {:arglists (quote ([owner name])), :name om.core/get-node, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "A helper function to get at React refs. Given a owning pure node\n  extract the ref specified by name.", :line 487, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, path {:arglists (quote ([cursor])), :name om.core/path, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 164, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, refresh-queued {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 296, :private true, :name om.core/refresh-queued}, children {:arglists (quote ([node])), :name om.core/children, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 58, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, IInitState {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 15, :protocol-symbol true, :name om.core/IInitState}, ICursor {:impls #{om.core/MapCursor om.core/IndexedCursor om.core/x13221 om.core/x13220}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 42, :protocol-symbol true, :name om.core/ICursor}, will-unmount {:arglists (quote ([this])), :protocol om.core/IWillUnmount, :name om.core/will-unmount, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 27, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, Pure {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 81, :private true, :name om.core/Pure}, read {:arglists (quote ([cursor f] [cursor korks f])), :name om.core/read, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Given a cursor and a function f, read its current value. f will be\n   passed a cursor which can only be read in the scope of f. Can take\n   an optional sequence of keys ks. Used for interacting with cursors\n   outside of render phase.", :line 458, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, render {:arglists (quote ([this])), :protocol om.core/IRender, :name om.core/render, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 36, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, join {:arglists (quote ([cursor korks])), :name om.core/join, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "EXPERIMENTAL: Given a cursor, get value from the root at the path\n   specified by a sequential list of keys ks.", :line 475, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, valid? {:arglists (quote ([m])), :name om.core/valid?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 334, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, cursor? {:arglists (quote ([x])), :name om.core/cursor?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 170, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, init-state {:arglists (quote ([this])), :protocol om.core/IInitState, :name om.core/init-state, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 15, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, IDidMount {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 24, :protocol-symbol true, :name om.core/IDidMount}, build-all {:arglists (quote ([f xs] [f xs m])), :name om.core/build-all, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag array, :variadic false, :max-fixed-arity 2} {:tag array, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Build a sequence of components. f is the component constructor\n   function, xs a sequence of cursors, and m a map of options the\n   same as provided to om.core/build.", :line 397, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, to-cursor* {:arglists (quote ([val state path])), :name om.core/to-cursor*, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 274, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, set-state! {:arglists (quote ([owner korks v])), :name om.core/set-state!, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a pure owning component, a sequential list of keys and value and\n   sets the state of the component. Conceptually analagous to React\n   setState. Will schedule an Om re-render.", :line 494, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, will-mount {:arglists (quote ([this])), :protocol om.core/IWillMount, :name om.core/will-mount, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 21, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, IDidUpdate {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 33, :protocol-symbol true, :name om.core/IDidUpdate}, IShouldUpdate {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 18, :protocol-symbol true, :name om.core/IShouldUpdate}, update! {:arglists (quote ([cursor f] [cursor f a] [cursor f a b] [cursor f a b c] [cursor f a b c d] [cursor f a b c d & args])), :name om.core/update!, :protocol-impl nil, :max-fixed-arity 6, :methods ({:variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3} {:variadic false, :max-fixed-arity 4} {:variadic false, :max-fixed-arity 5} {:variadic false, :max-fixed-arity 6} {:variadic true, :max-fixed-arity 6}), :column 1, :protocol-inline nil, :variadic true, :doc "Like transact! but no list of keys given. An Om re-render\n   will be triggered.", :line 437, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, root {:arglists (quote ([value f target])), :name om.core/root, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes an immutable value or value wrapped in an atom, an initial\n   function f, and a DOM target. Installs an Om/React render loop. f\n   must return an instance that at a minimum implements IRender (it\n   may implement other React life cycle protocols). f must take\n   two arguments, the root cursor and the owning pure node. A\n   cursor is just the original data wrapped in an ICursor instance\n   which maintains path information.\n\n   Example:\n\n   (root {:message :hello}\n     (fn [data]\n       ...)\n     js/document.body)", :line 298, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, -to-cursor {:arglists (quote ([value state] [value state path])), :protocol om.core/IToCursor, :name om.core/-to-cursor, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 47, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, bind {:arglists (quote ([f cursor] [f cursor a] [f cursor a b] [f cursor a b c] [f cursor a b c d] [f cursor a b c d & args])), :name om.core/bind, :protocol-impl nil, :max-fixed-arity 6, :methods ({:tag function, :variadic false, :max-fixed-arity 2} {:tag function, :variadic false, :max-fixed-arity 3} {:tag function, :variadic false, :max-fixed-arity 4} {:tag function, :variadic false, :max-fixed-arity 5} {:tag function, :variadic false, :max-fixed-arity 6} {:tag function, :variadic true, :max-fixed-arity 6}), :column 1, :protocol-inline nil, :variadic true, :doc "Convenience function for creating event handlers on cursors. Takes\n   a function f which should receive the event as the first argument,\n   the cursor as the second argument, and any number of optional\n   arguments beyond that. Inside of f the cursor will be readable.", :line 529, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, get-state {:arglists (quote ([owner] [owner korks])), :name om.core/get-state, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 1} {:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a pure owning component and sequential list of keys and returns\n   a property if it exists. Will never return pending state values.", :line 514, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, -value {:arglists (quote ([cursor])), :protocol om.core/ICursor, :name om.core/-value, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 42, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, IWillUpdate {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 30, :protocol-symbol true, :name om.core/IWillUpdate}, IRender {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 36, :protocol-symbol true, :name om.core/IRender}, MapCursor {:column 10, :line 173, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IEquiv cljs.core/ICollection cljs.core/ICounted cljs.core/IAssociative cljs.core/ISeqable cljs.core/IPrintWithWriter om.core/ICursor cljs.core/IMap cljs.core/ILookup}, :num-fields 3, :type true, :name om.core/MapCursor}, IWillUnmount {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 27, :protocol-symbol true, :name om.core/IWillUnmount}, did-update {:arglists (quote ([this prev-props prev-state root-node])), :protocol om.core/IDidUpdate, :name om.core/did-update, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 33, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, build {:arglists (quote ([f cursor] [f cursor m])), :name om.core/build, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag om.core/Pure, :variadic false, :max-fixed-arity 2} {:tag om.core/Pure, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Builds a Om component. Takes an IRender instance returning function\n   f, a cursor, and an optional third argument which may be a map of\n   build specifications.\n\n   f - is a function of 2 or 3 arguments. The first argument will\n   be the cursor and the second argument will be the owning pure node.\n   If a map of options m is passed in this will be the third\n   argument. f must return at a minimum an IRender instance, this\n   instance may implement other React life cycle protocols.\n\n   cursor - an ICursor instance\n\n   m - a map the following keys are allowed:\n\n     :key       - a keyword that should be used to look up the key used by\n                  React itself when rendering sequential things.\n     :react-key - an explicit react key\n     :fn        - a function to apply to the data at the relative path before\n                  invoking f.\n     :opts      - a map of options to pass to the component.\n\n   Example:\n\n     (build list-of-gadgets cursor\n        {:opts {:event-chan ...\n                :narble ...}})\n  ", :line 337, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, to-cursor {:arglists (quote ([val] [val state] [val state path])), :name om.core/to-cursor, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil clj om.core/MapCursor om.core/IndexedCursor any}, :variadic false, :max-fixed-arity 1} {:tag #{nil clj om.core/MapCursor om.core/IndexedCursor any}, :variadic false, :max-fixed-arity 2} {:tag #{nil clj om.core/MapCursor om.core/IndexedCursor any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 281, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, merge-pending-state {:arglists (quote ([owner])), :name om.core/merge-pending-state, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 73, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, IndexedCursor {:column 10, :line 219, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :protocols #{cljs.core/ICloneable cljs.core/IEquiv cljs.core/ICollection cljs.core/IIndexed cljs.core/ICounted cljs.core/IAssociative cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential om.core/ICursor cljs.core/IStack cljs.core/ILookup}, :num-fields 3, :type true, :name om.core/IndexedCursor}, -state {:arglists (quote ([cursor])), :protocol om.core/ICursor, :name om.core/-state, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 42, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, IWillMount {:impls #{}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs", :column 1, :line 21, :protocol-symbol true, :name om.core/IWillMount}, get-props {:arglists (quote ([x])), :name om.core/get-props, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Given an owning Pure node return the Om props. Analogous to React \n   component props.", :line 64, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}, -path {:arglists (quote ([cursor])), :protocol om.core/ICursor, :name om.core/-path, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 42, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/core.cljs"}}, :require-macros {dom om.dom, om.dom om.dom, om.core om.core}, :excludes #{}, :imports nil, :doc nil, :uses nil}, cljs-app.core {:use-macros {obj cljs-app.macros, ng-fn cljs-app.macros, defn-js cljs-app.macros, << cljs-app.macros, go-loop cljs.core.async.macros, go cljs.core.async.macros}, :requires {cljs-app.view cljs-app.view, async cljs.core.async, s clojure.string, view cljs-app.view, cljs-app.js-prot cljs-app.js-prot, ws cljs-app.websockets, cljs-app.websockets cljs-app.websockets, clojure.string clojure.string, prot cljs-app.js-prot, cljs.core.async cljs.core.async}, :name cljs-app.core, :defs {ng-root {:arglists (quote ([])), :name cljs-app.core/ng-root, :protocol-impl nil, :max-fixed-arity 0, :methods ({:variadic false, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic false, :line 26, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, cached-singleton {:arglists (quote ([f])), :name cljs-app.core/cached-singleton, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 46, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, dbg-clj {:arglists (quote ([m])), :name cljs-app.core/dbg-clj, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 16, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, pop-left! {:arglists (quote ([arr])), :name cljs-app.core/pop-left!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 91, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, init-tweets {:arglists (quote ([success])), :name cljs-app.core/init-tweets, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 76, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, setup-tweets {:arglists (quote ([scope])), :name cljs-app.core/setup-tweets, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 130, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, $http {:file "src-cljs/cljs_app/core.cljs", :column 1, :line 52, :name cljs-app.core/$http}, dbg {:arglists (quote ([m])), :name cljs-app.core/dbg, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 21, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, conj-left! {:arglists (quote ([arr o])), :name cljs-app.core/conj-left!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil array}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 84, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, remote {:arglists (quote ([[ns var & args] success])), :name cljs-app.core/remote, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 63, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, link {:arglists (quote ([href content])), :name cljs-app.core/link, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 99, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, set-mtgox {:arglists (quote ([scope])), :name cljs-app.core/set-mtgox, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 72, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, log {:arglists (quote ([arg] [arg & args])), :name cljs-app.core/log, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 11, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, continue? {:file "src-cljs/cljs_app/core.cljs", :column 1, :line 117, :name cljs-app.core/continue?}, add-tweet {:arglists (quote ([scope tweet])), :name cljs-app.core/add-tweet, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 126, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, set-once {:arglists (quote ([scope])), :name cljs-app.core/set-once, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 148, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, mtgox {:arglists (quote ([success])), :name cljs-app.core/mtgox, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 68, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, injector {:arglists (quote ([])), :name cljs-app.core/injector, :protocol-impl nil, :max-fixed-arity 0, :methods ({:variadic false, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic false, :line 30, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, service {:arglists (quote ([svc])), :name cljs-app.core/service, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 42, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, setup-ops {:arglists (quote ([scope])), :name cljs-app.core/setup-ops, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 136, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, send-tweet {:arglists (quote ([tweet success])), :name cljs-app.core/send-tweet, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 80, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, scope {:arglists (quote ([elt])), :name cljs-app.core/scope, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 36, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, xhr {:arglists (quote ([method url data] [method url data success])), :name cljs-app.core/xhr, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag any, :variadic false, :max-fixed-arity 3} {:variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 54, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}, format-object {:file "src-cljs/cljs_app/core.cljs", :column 1, :line 97, :name cljs-app.core/format-object}, tick {:arglists (quote ([scope timeout])), :name cljs-app.core/tick, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{clj-nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 119, :fn-var true, :file "src-cljs/cljs_app/core.cljs"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, cljs-app.macros cljs-app.macros}, :excludes #{}, :imports nil, :doc nil, :uses {>! cljs.core.async, <! cljs.core.async}}, cljs-app.websockets {:use-macros {go-loop cljs.core.async.macros, go cljs.core.async.macros}, :requires {async cljs.core.async, cljs.core.async cljs.core.async, cljs.reader cljs.reader}, :name cljs-app.websockets, :defs {connect! {:arglists (quote ([uri] [uri {:keys [in out], :or {in chan, out chan}}])), :name cljs-app.websockets/connect!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Connects to a websocket. Returns a channel that, when connected, puts a\n  map with with keys,\n  :uri  The URI connected to\n  :ws   Raw Websocket object\n  :in   Channel to write values to socket on\n  :out  Channel to recieve socket data on", :line 6, :fn-var true, :file "src-cljs/cljs_app/websocket.cljs"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :excludes #{}, :imports nil, :doc nil, :uses {>! cljs.core.async, put! cljs.core.async, close! cljs.core.async, read-string cljs.reader, <! cljs.core.async, chan cljs.core.async}}, clojure.string {:use-macros nil, :requires {gstringbuf goog.string.StringBuffer, goog.string.StringBuffer goog.string.StringBuffer, goog.string goog.string, gstring goog.string}, :name clojure.string, :defs {pop-last-while-empty {:arglists (quote ([v])), :name clojure.string/pop-last-while-empty, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 81, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, seq-reverse {:arglists (quote ([coll])), :name clojure.string/seq-reverse, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 14, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, trim {:arglists (quote ([s])), :name clojure.string/trim, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Removes whitespace from both ends of string.", :line 132, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, lower-case {:arglists (quote ([s])), :name clojure.string/lower-case, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Converts string to all lower-case.", :line 58, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, split {:arglists (quote ([s re] [s re limit])), :name clojure.string/split, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Splits string on a regular expression. Optional argument limit is\n  the maximum number of splits. Not lazy. Returns vector of the splits.", :line 104, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, join {:arglists (quote ([coll] [separator coll])), :name clojure.string/join, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1} {:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a string of all elements in coll, as returned by (seq coll),\n   separated by an optional separator.", :line 45, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, upper-case {:arglists (quote ([s])), :name clojure.string/upper-case, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Converts string to all upper-case.", :line 53, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, trimr {:arglists (quote ([s])), :name clojure.string/trimr, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Removes whitespace from the right side of string.", :line 142, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, split-with-empty-regex {:arglists (quote ([s limit])), :name clojure.string/split-with-empty-regex, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{clj cljs/core.PersistentVector}, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 94, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, split-lines {:arglists (quote ([s])), :name clojure.string/split-lines, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Splits s on \n or \r\n.", :line 127, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, triml {:arglists (quote ([s])), :name clojure.string/triml, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Removes whitespace from the left side of string.", :line 137, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, replace {:arglists (quote ([s match replacement])), :name clojure.string/replace, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Replaces all instance of match with replacement in s.\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).", :line 23, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, reverse {:arglists (quote ([s])), :name clojure.string/reverse, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns s with its characters reversed.", :line 18, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, capitalize {:arglists (quote ([s])), :name clojure.string/capitalize, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Converts first character of the string to upper-case, all other\n  characters to lower-case.", :line 63, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, escape {:arglists (quote ([s cmap])), :name clojure.string/escape, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Return a new string, using cmap to escape each character ch\n   from s as follows:\n\n   If (cmap ch) is nil, append ch to the new string.\n   If (cmap ch) is non-nil, append (str (cmap ch)) instead.", :line 164, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, blank? {:arglists (quote ([s])), :name clojure.string/blank?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "True is s is nil, empty, or contains only whitespace.", :line 159, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, replace-first {:arglists (quote ([s match replacement])), :name clojure.string/replace-first, :protocol-impl nil, :max-fixed-arity 3, :methods ({:variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Replaces the first instance of match with replacement in s.\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).", :line 36, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, trim-newline {:arglists (quote ([s])), :name clojure.string/trim-newline, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil string}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Removes all trailing newline \\n or return \\r characters from\n  string.  Similar to Perl's chomp.", :line 147, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}, discard-trailing-if-needed {:arglists (quote ([limit v])), :name clojure.string/discard-trailing-if-needed, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 88, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/clojure/string.cljs"}}, :require-macros nil, :excludes #{replace reverse}, :imports nil, :doc nil, :uses nil}, om.dom {:use-macros nil, :requires nil, :name om.dom, :defs {script {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/script, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, track {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/track, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, article {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/article, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, noscript {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/noscript, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, h4 {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/h4, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, h3 {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/h3, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, mark {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/mark, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, h5 {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/h5, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, span {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/span, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, input {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs", :column 1, :line 34, :name om.dom/input}, time {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/time, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, h2 {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/h2, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, th {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/th, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, label {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/label, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, h6 {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/h6, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, line {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/line, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, pre {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/pre, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, nav {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/nav, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, address {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/address, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, sup {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/sup, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, h1 {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/h1, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, table {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/table, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, body {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/body, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, option {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs", :column 1, :line 38, :name om.dom/option}, datalist {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/datalist, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, u {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/u, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, footer {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/footer, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, select {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/select, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, q {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/q, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, samp {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/samp, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, source {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/source, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, summary {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/summary, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, li {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/li, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, p {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/p, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, var {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/var, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, td {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/td, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, iframe {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/iframe, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, tr {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/tr, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, s {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/s, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, path {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/path, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, menuitem {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/menuitem, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, colgroup {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/colgroup, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, html {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/html, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, dfn {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/dfn, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, render {:arglists (quote ([component el])), :name om.dom/render, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 40, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, wrap-form-element {:arglists (quote ([ctor])), :name om.dom/wrap-form-element, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 7, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, optgroup {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/optgroup, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, tbody {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/tbody, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, ul {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/ul, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, sub {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/sub, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, text {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/text, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, strong {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/strong, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, data {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/data, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, progress {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/progress, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, polyline {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/polyline, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, img {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/img, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, fieldset {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/fieldset, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, em {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/em, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, rt {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/rt, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, video {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/video, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, keygen {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/keygen, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, map {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/map, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, div {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/div, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, dt {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/dt, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, ol {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/ol, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, link {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/link, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, form {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/form, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, menu {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/menu, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, del {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/del, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, a {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/a, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, head {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/head, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, area {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/area, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, legend {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/legend, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, hr {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/hr, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, header {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/header, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, param {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/param, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, meter {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/meter, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, tfoot {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/tfoot, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, blockquote {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/blockquote, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, b {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/b, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, dl {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/dl, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, figcaption {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/figcaption, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, caption {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/caption, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, style {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/style, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, abbr {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/abbr, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, ruby {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/ruby, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, bdi {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/bdi, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, g {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/g, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, svg {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/svg, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, rect {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/rect, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, embed {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/embed, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, rp {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/rp, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, figure {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/figure, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, canvas {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/canvas, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, section {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/section, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, object {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/object, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, title {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/title, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, button {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/button, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, output {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/output, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, audio {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/audio, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, dd {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/dd, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, bdo {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/bdo, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, cite {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/cite, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, code {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/code, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, kbd {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/kbd, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, big {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/big, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, col {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/col, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, i {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/i, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, ins {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/ins, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, thead {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/thead, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, base {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/base, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, circle {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/circle, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, br {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/br, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, textarea {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs", :column 1, :line 36, :name om.dom/textarea}, wbr {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/wbr, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, small {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/small, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, main {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/main, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, aside {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/aside, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}, meta {:arglists (quote ([opts__9112__auto__ & children__9113__auto__])), :name om.dom/meta, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 5, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/om/dom.cljs"}}, :require-macros {om.dom om.dom, dom om.dom}, :excludes #{time map meta}, :imports nil, :doc nil, :uses nil}, cljs.core.async.impl.protocols {:use-macros nil, :requires nil, :name cljs.core.async.impl.protocols, :defs {add! {:arglists (quote ([b itm])), :protocol cljs.core.async.impl.protocols/Buffer, :name cljs.core.async.impl.protocols/add!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 27, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs"}, UnblockingBuffer {:impls #{cljs.core.async.impl.buffers/DroppingBuffer cljs.core.async.impl.buffers/SlidingBuffer}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs", :column 1, :line 33, :protocol-symbol true, :name cljs.core.async.impl.protocols/UnblockingBuffer}, put! {:arglists (quote ([port val fn0-handler])), :protocol cljs.core.async.impl.protocols/WritePort, :name cljs.core.async.impl.protocols/put!, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 16, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs"}, Handler {:impls #{cljs.core.async.impl.ioc-helpers/t13105 cljs.core.async.impl.ioc-helpers/t13108}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs", :column 1, :line 22, :protocol-symbol true, :name cljs.core.async.impl.protocols/Handler}, close! {:arglists (quote ([chan])), :protocol cljs.core.async.impl.protocols/Channel, :name cljs.core.async.impl.protocols/close!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 19, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs"}, full? {:arglists (quote ([b])), :protocol cljs.core.async.impl.protocols/Buffer, :name cljs.core.async.impl.protocols/full?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 27, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs"}, take! {:arglists (quote ([port fn1-handler])), :protocol cljs.core.async.impl.protocols/ReadPort, :name cljs.core.async.impl.protocols/take!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 13, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs"}, active? {:arglists (quote ([h])), :protocol cljs.core.async.impl.protocols/Handler, :name cljs.core.async.impl.protocols/active?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 22, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs"}, WritePort {:impls #{cljs.core.async.impl.channels/ManyToManyChannel}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs", :column 1, :line 16, :protocol-symbol true, :name cljs.core.async.impl.protocols/WritePort}, commit {:arglists (quote ([h])), :protocol cljs.core.async.impl.protocols/Handler, :name cljs.core.async.impl.protocols/commit, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 22, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs"}, Buffer {:impls #{cljs.core.async.impl.buffers/FixedBuffer cljs.core.async.impl.buffers/DroppingBuffer cljs.core.async.impl.buffers/SlidingBuffer}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs", :column 1, :line 27, :protocol-symbol true, :name cljs.core.async.impl.protocols/Buffer}, Channel {:impls #{cljs.core.async.impl.channels/ManyToManyChannel}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs", :column 1, :line 19, :protocol-symbol true, :name cljs.core.async.impl.protocols/Channel}, ReadPort {:impls #{cljs.core.async.impl.channels/ManyToManyChannel}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs", :column 1, :line 13, :protocol-symbol true, :name cljs.core.async.impl.protocols/ReadPort}, MAX-QUEUE-SIZE {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs", :column 1, :line 11, :const true, :name cljs.core.async.impl.protocols/MAX-QUEUE-SIZE}, remove! {:arglists (quote ([b])), :protocol cljs.core.async.impl.protocols/Buffer, :name cljs.core.async.impl.protocols/remove!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 27, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/protocols.cljs"}}, :require-macros nil, :excludes #{}, :imports nil, :doc nil, :uses nil}, cljs.reader {:use-macros nil, :requires {goog.string goog.string, gstring goog.string}, :name cljs.reader, :defs {read-2-chars {:arglists (quote ([reader])), :name cljs.reader/read-2-chars, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 173, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-4-chars {:arglists (quote ([reader])), :name cljs.reader/read-4-chars, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 179, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, indivisible? {:arglists (quote ([num div])), :name cljs.reader/indivisible?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 452, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, re-find* {:arglists (quote ([re s])), :name cljs.reader/re-find*, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 102, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, throwing-reader {:arglists (quote ([msg])), :name cljs.reader/throwing-reader, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 354, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, ratio-pattern {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 98, :name cljs.reader/ratio-pattern}, number-literal? {:arglists (quote ([reader initch])), :name cljs.reader/number-literal?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Checks whether the reader is at the start of a number literal", :line 51, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :tag boolean}, wrapping-reader {:arglists (quote ([sym])), :name cljs.reader/wrapping-reader, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 349, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, escape-char {:arglists (quote ([buffer reader])), :name cljs.reader/escape-char, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil string clj-nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 199, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-list {:arglists (quote ([rdr _])), :name cljs.reader/read-list, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 270, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, parse-timestamp {:arglists (quote ([ts])), :name cljs.reader/parse-timestamp, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag js/Date, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 505, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, desugar-meta {:arglists (quote ([f])), :name cljs.reader/desugar-meta, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil cljs.core/IMap}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 341, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, macros {:arglists (quote ([c])), :name cljs.reader/macros, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil function clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 382, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-queue {:arglists (quote ([elems])), :name cljs.reader/read-queue, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj any}, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 521, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, leap-year? {:arglists (quote ([year])), :name cljs.reader/leap-year?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 456, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, reader-error {:arglists (quote ([rdr & msg])), :name cljs.reader/reader-error, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag ignore, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :line 68, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, comment-prefix? {:arglists (quote ([ch])), :name cljs.reader/comment-prefix?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Checks whether the character begins a comment.", :line 46, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :tag boolean}, read-map {:arglists (quote ([rdr _])), :name cljs.reader/read-map, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 280, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read {:arglists (quote ([reader eof-is-error sentinel is-recursive])), :name cljs.reader/read, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{nil number boolean clj-nil any cljs.core/Symbol}, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :doc "Reads the first object from a PushbackReader. Returns the object read.\n   If EOF, throws if eof-is-error is true. Otherwise returns sentinel.", :line 412, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-set {:arglists (quote ([rdr _])), :name cljs.reader/read-set, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 369, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-char {:arglists (quote ([reader])), :protocol cljs.reader/PushbackReader, :name cljs.reader/read-char, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 12, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-comment {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 274, :name cljs.reader/read-comment}, read-symbol {:arglists (quote ([reader initch])), :name cljs.reader/read-symbol, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil boolean clj-nil cljs.core/Symbol}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 317, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, unread {:arglists (quote ([reader ch])), :protocol cljs.reader/PushbackReader, :name cljs.reader/unread, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 12, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, parse-and-validate-timestamp {:arglists (quote ([s])), :name cljs.reader/parse-and-validate-timestamp, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 480, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-string {:arglists (quote ([s])), :name cljs.reader/read-string, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil number boolean clj-nil any cljs.core/Symbol}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Reads one object from the string s", :line 431, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-meta {:arglists (quote ([rdr _])), :name cljs.reader/read-meta, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{clj clj-nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 359, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, special-symbols {:arglists (quote ([t not-found])), :name cljs.reader/special-symbols, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil boolean clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 310, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, deregister-default-tag-parser! {:arglists (quote ([])), :name cljs.reader/deregister-default-tag-parser!, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic false, :line 595, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, PushbackReader {:impls #{cljs.reader/StringPushbackReader}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 12, :protocol-symbol true, :name cljs.reader/PushbackReader}, register-default-tag-parser! {:arglists (quote ([f])), :name cljs.reader/register-default-tag-parser!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 589, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-uuid {:arglists (quote ([uuid])), :name cljs.reader/read-uuid, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core/UUID, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 549, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, zero-fill-right-and-truncate {:arglists (quote ([s width])), :name cljs.reader/zero-fill-right-and-truncate, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 440, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, divisible? {:arglists (quote ([num div])), :name cljs.reader/divisible?, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 448, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, make-unicode-char {:arglists (quote ([code-str])), :name cljs.reader/make-unicode-char, :protocol-impl nil, :max-fixed-arity 1, :methods ({:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 195, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, push-back-reader {:arglists (quote ([s])), :name cljs.reader/push-back-reader, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.reader/StringPushbackReader, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 28, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-js {:arglists (quote ([form])), :name cljs.reader/read-js, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{array object}, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 528, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-number {:arglists (quote ([reader initch])), :name cljs.reader/read-number, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{number clj-nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 287, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-delimited-list {:arglists (quote ([delim rdr recursive?])), :name cljs.reader/read-delimited-list, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 231, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, maybe-read-tagged-type {:arglists (quote ([rdr initch])), :name cljs.reader/maybe-read-tagged-type, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 563, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, days-in-month {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 462, :private true, :name cljs.reader/days-in-month}, StringPushbackReader {:column 10, :line 17, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :protocols #{cljs.reader/PushbackReader}, :num-fields 3, :type true, :name cljs.reader/StringPushbackReader}, not-implemented {:arglists (quote ([rdr ch])), :name cljs.reader/not-implemented, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag ignore, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 250, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, whitespace? {:arglists (quote ([ch])), :name cljs.reader/whitespace?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Checks whether a given character is whitespace", :line 36, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :tag boolean}, check {:arglists (quote ([low n high msg])), :name cljs.reader/check, :protocol-impl nil, :max-fixed-arity 4, :methods ({:variadic false, :max-fixed-arity 4}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 475, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, validate-unicode-escape {:arglists (quote ([unicode-pattern reader escape-char unicode-str])), :name cljs.reader/validate-unicode-escape, :protocol-impl nil, :max-fixed-arity 4, :methods ({:variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 190, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, ->StringPushbackReader {:arglists (quote ([s buffer idx])), :name cljs.reader/->StringPushbackReader, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.reader/StringPushbackReader, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 17, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, escape-char-map {:arglists (quote ([c])), :name cljs.reader/escape-char-map, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{string clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 158, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, re-matches* {:arglists (quote ([re s])), :name cljs.reader/re-matches*, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 142, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, symbol-pattern {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 100, :name cljs.reader/symbol-pattern}, read-discard {:arglists (quote ([rdr _])), :name cljs.reader/read-discard, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 377, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, match-int {:arglists (quote ([s])), :name cljs.reader/match-int, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{number clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 110, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-vector {:arglists (quote ([rdr _])), :name cljs.reader/read-vector, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 276, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, dispatch-macros {:arglists (quote ([s])), :name cljs.reader/dispatch-macros, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil function clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 403, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, *tag-table* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 555, :name cljs.reader/*tag-table*}, *default-data-reader-fn* {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 560, :name cljs.reader/*default-data-reader-fn*}, int-pattern {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 97, :name cljs.reader/int-pattern}, read-keyword {:arglists (quote ([reader initch])), :name cljs.reader/read-keyword, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil cljs.core/Keyword clj-nil}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 325, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-unmatched-delimiter {:arglists (quote ([rdr ch])), :name cljs.reader/read-unmatched-delimiter, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag ignore, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 266, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, match-float {:arglists (quote ([s])), :name cljs.reader/match-float, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 138, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, match-ratio {:arglists (quote ([s])), :name cljs.reader/match-ratio, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 131, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-past {:arglists (quote ([pred rdr])), :name cljs.reader/read-past, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Read until first character that doesn't match pred, returning\n   char.", :line 222, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, skip-line {:arglists (quote ([reader _])), :name cljs.reader/skip-line, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Advances the reader to the end of a line. Returns the reader", :line 88, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, macro-terminating? {:arglists (quote ([ch])), :name cljs.reader/macro-terminating?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :ret-tag boolean, :variadic false, :line 72, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :tag boolean}, read-string* {:arglists (quote ([reader _])), :name cljs.reader/read-string*, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 299, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, parse-int {:arglists (quote ([s])), :name cljs.reader/parse-int, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 470, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-token {:arglists (quote ([rdr initch])), :name cljs.reader/read-token, :protocol-impl nil, :max-fixed-arity 2, :methods ({:variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 78, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, read-dispatch {:arglists (quote ([rdr _])), :name cljs.reader/read-dispatch, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 256, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, deregister-tag-parser! {:arglists (quote ([tag])), :name cljs.reader/deregister-tag-parser!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 582, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, match-number {:arglists (quote ([s])), :name cljs.reader/match-number, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{number clj-nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 151, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, unicode-4-pattern {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 188, :name cljs.reader/unicode-4-pattern}, timestamp-regex {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 468, :private true, :name cljs.reader/timestamp-regex}, read-regex {:arglists (quote ([rdr ch])), :name cljs.reader/read-regex, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag js/RegExp, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 373, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, register-tag-parser! {:arglists (quote ([tag f])), :name cljs.reader/register-tag-parser!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil clj-nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 575, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, numeric? {:arglists (quote ([ch])), :name cljs.reader/numeric?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :ret-tag boolean, :variadic false, :doc "Checks whether a given character is numeric", :line 41, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :tag boolean}, read-date {:arglists (quote ([s])), :name cljs.reader/read-date, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag js/Date, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 514, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs"}, unicode-2-pattern {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 187, :name cljs.reader/unicode-2-pattern}, float-pattern {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/reader.cljs", :column 1, :line 99, :name cljs.reader/float-pattern}}, :require-macros nil, :excludes #{}, :imports nil, :doc nil, :uses nil}, cljs.core.async.impl.timers {:use-macros nil, :requires {dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, channels cljs.core.async.impl.channels, cljs.core.async.impl.channels cljs.core.async.impl.channels, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, impl cljs.core.async.impl.protocols}, :name cljs.core.async.impl.timers, :defs {TIMEOUT_RESOLUTION_MS {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs", :column 1, :line 150, :name cljs.core.async.impl.timers/TIMEOUT_RESOLUTION_MS}, SkipListNode {:column 10, :line 25, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs", :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter}, :num-fields 3, :type true, :name cljs.core.async.impl.timers/SkipListNode}, skip-list {:arglists (quote ([])), :name cljs.core.async.impl.timers/skip-list, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag cljs.core.async.impl.timers/SkipList, :variadic false, :max-fixed-arity 0}), :column 1, :protocol-inline nil, :variadic false, :line 145, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs"}, timeouts-map {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs", :column 1, :line 148, :name cljs.core.async.impl.timers/timeouts-map}, MAX_LEVEL {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs", :column 1, :line 14, :name cljs.core.async.impl.timers/MAX_LEVEL}, random-level {:arglists (quote ([] [level])), :name cljs.core.async.impl.timers/random-level, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0} {:variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 17, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs"}, SkipList {:column 10, :line 59, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs", :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core.async.impl.timers/Object}, :num-fields 2, :type true, :name cljs.core.async.impl.timers/SkipList}, timeout {:arglists (quote ([msecs])), :name cljs.core.async.impl.timers/timeout, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil cljs.core.async.impl.channels/ManyToManyChannel clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "returns a channel that will close after msecs", :line 152, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs"}, ->SkipList {:arglists (quote ([header level])), :name cljs.core.async.impl.timers/->SkipList, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async.impl.timers/SkipList, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 59, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs"}, ->SkipListNode {:arglists (quote ([key val forward])), :name cljs.core.async.impl.timers/->SkipListNode, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.timers/SkipListNode, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 25, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs"}, least-greater-node {:arglists (quote ([x k level] [x k level update])), :name cljs.core.async.impl.timers/least-greater-node, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag any, :variadic false, :max-fixed-arity 3} {:variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 44, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs"}, skip-list-node {:arglists (quote ([level] [k v level])), :name cljs.core.async.impl.timers/skip-list-node, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.timers/SkipListNode, :variadic false, :max-fixed-arity 1} {:tag cljs.core.async.impl.timers/SkipListNode, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 34, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs"}, P {:file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async/impl/timers.cljs", :column 1, :line 15, :name cljs.core.async.impl.timers/P}}, :require-macros nil, :excludes #{}, :imports nil, :doc nil, :uses nil}, cljs.core.async {:use-macros {go-loop cljs.core.async.macros, go cljs.core.async.macros}, :requires {cljs.core.async.impl.ioc-helpers cljs.core.async.impl.ioc-helpers, impl cljs.core.async.impl.protocols, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, timers cljs.core.async.impl.timers, cljs.core.async.impl.channels cljs.core.async.impl.channels, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, dispatch cljs.core.async.impl.dispatch, buffers cljs.core.async.impl.buffers, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, cljs.core.async.impl.timers cljs.core.async.impl.timers, channels cljs.core.async.impl.channels, helpers cljs.core.async.impl.ioc-helpers}, :name cljs.core.async, :defs {t10554 {:column 3, :line 241, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core.async.impl.protocols/Channel cljs.core/IMeta cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IWithMeta}, :num-fields 4, :type true, :name cljs.core.async/t10554}, unmix-all {:arglists (quote ([mix])), :name cljs.core.async/unmix-all, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "removes all inputs from the mix", :line 560, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, alts! {:arglists (quote ([ports & {:as opts}])), :name cljs.core.async/alts!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj-nil, :variadic true, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic true, :doc "Completes at most one of several channel operations. Must be called\n  inside a (go ...) block. ports is a vector of channel endpoints, which\n  can be either a channel to take from or a vector of\n  [channel-to-put-to val-to-put], in any combination. Takes will be\n  made as if by <!, and puts will be made as if by >!. Unless\n  the :priority option is true, if more than one port operation is\n  ready a non-deterministic choice will be made. If no operation is\n  ready and a :default value is supplied, [default-val :default] will\n  be returned, otherwise alts! will park until the first operation to\n  become ready completes. Returns [val port] of the completed\n  operation, where val is the value taken for takes, and nil for puts.\n\n  opts are passed as :key val ... Supported options:\n\n  :default val - the value to use if none of the operations are immediately ready\n  :priority true - (default nil) when true, the operations will be tried in order.\n\n  Note: there is no guarantee that the port exps or val exprs will be\n  used, nor in what order should they be, so they should not be\n  depended upon for side effects.", :line 164, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10504 {:arglists (quote ([f fn-handler meta10505])), :name cljs.core.async/->t10504, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async/t10504, :variadic false, :max-fixed-arity 3}), :column 3, :protocol-inline nil, :variadic false, :line 12, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10548 {:arglists (quote ([ch f map> meta10549])), :name cljs.core.async/->t10548, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async/t10548, :variadic false, :max-fixed-arity 4}), :column 3, :protocol-inline nil, :variadic false, :line 223, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10545 {:arglists (quote ([ch f map> meta10546])), :name cljs.core.async/->t10545, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async/t10545, :variadic false, :max-fixed-arity 4}), :column 3, :protocol-inline nil, :variadic false, :line 223, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10501 {:arglists (quote ([f fn-handler meta10502])), :name cljs.core.async/->t10501, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async/t10501, :variadic false, :max-fixed-arity 3}), :column 3, :protocol-inline nil, :variadic false, :line 12, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, tap {:arglists (quote ([mult ch] [mult ch close?])), :name cljs.core.async/tap, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :line 457, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, unmix {:arglists (quote ([mix ch])), :name cljs.core.async/unmix, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Removes ch as an input to the mix", :line 555, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, >! {:arglists (quote ([port val])), :name cljs.core.async/>!, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "puts a val into port. nil values are not allowed. Must be called\n  inside a (go ...) block. Will park if no buffer space is available.", :line 81, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, random-array {:arglists (quote ([n])), :name cljs.core.async/random-array, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag array, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 107, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, nop {:arglists (quote ([])), :name cljs.core.async/nop, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 79, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, admix* {:arglists (quote ([m ch])), :protocol cljs.core.async/Mix, :name cljs.core.async/admix*, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 474, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10542 {:arglists (quote ([fn1 _ meta10540 ch f map< meta10543])), :name cljs.core.async/->t10542, :protocol-impl nil, :max-fixed-arity 7, :methods ({:tag cljs.core.async/t10542, :variadic false, :max-fixed-arity 7}), :column 10, :protocol-inline nil, :variadic false, :line 205, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, alt-handler {:arglists (quote ([flag cb])), :name cljs.core.async/alt-handler, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async/t10523, :variadic false, :max-fixed-arity 2}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 130, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t11729 {:arglists (quote ([pick out attrs cs calc-state solo-modes mix changed change solo-mode meta11730])), :name cljs.core.async/->t11729, :protocol-impl nil, :max-fixed-arity 11, :methods ({:tag cljs.core.async/t11729, :variadic false, :max-fixed-arity 11}), :column 11, :protocol-inline nil, :variadic false, :line 526, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, mapcat* {:arglists (quote ([f in out])), :name cljs.core.async/mapcat*, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 288, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, split {:arglists (quote ([p ch] [p ch t-buf-or-n f-buf-or-n])), :name cljs.core.async/split, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2} {:tag cljs.core/IVector, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a predicate and a source channel and returns a vector of two\n  channels, the first of which will contain the values for which the\n  predicate returned true, the second those for which it returned\n  false.\n\n  The out channels will be unbuffered by default, or two buf-or-ns can\n  be supplied. The channels will close after the source channel has\n  closed.", :line 343, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, partition-by {:arglists (quote ([f ch] [f ch buf-or-n])), :name cljs.core.async/partition-by, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a channel that will contain vectors of items taken from ch. New\n   vectors will be created whenever (f itm) returns a value that differs from\n   the previous item's (f itm).\n\n  The output channel is unbuffered, unless buf-or-n is given", :line 793, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, pub {:arglists (quote ([ch topic-fn] [ch topic-fn buf-fn])), :name cljs.core.async/pub, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async/t11979, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async/t12103, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source.", :line 588, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10517 {:arglists (quote ([flag alt-flag meta10518])), :name cljs.core.async/->t10517, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async/t10517, :variadic false, :max-fixed-arity 3}), :column 5, :protocol-inline nil, :variadic false, :line 123, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, onto-chan {:arglists (quote ([ch coll] [ch coll close?])), :name cljs.core.async/onto-chan, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied.", :line 378, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10514 {:column 5, :line 123, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core.async.impl.protocols/Handler}, :num-fields 3, :type true, :name cljs.core.async/t10514}, put! {:arglists (quote ([port val] [port val fn0] [port val fn0 on-caller?])), :name cljs.core.async/put!, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag clj-nil, :variadic false, :max-fixed-arity 3} {:tag clj-nil, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :doc "Asynchronously puts a val into port, calling fn0 (if supplied) when\n   complete. nil values are not allowed. Will throw if closed. If\n   on-caller? (default true) is true, and the put is immediately\n   accepted, will call fn0 on calling thread.  Returns nil.", :line 87, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t11449 {:column 11, :line 426, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core.async/Mult cljs.core/IWithMeta cljs.core.async/Mux}, :num-fields 4, :type true, :name cljs.core.async/t11449}, ->t11449 {:arglists (quote ([cs ch mult meta11450])), :name cljs.core.async/->t11449, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async/t11449, :variadic false, :max-fixed-arity 4}), :column 11, :protocol-inline nil, :variadic false, :line 426, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, untap-all* {:arglists (quote ([m])), :protocol cljs.core.async/Mult, :name cljs.core.async/untap-all*, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 407, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, dropping-buffer {:arglists (quote ([n])), :name cljs.core.async/dropping-buffer, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.buffers/DroppingBuffer, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer).", :line 22, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10514 {:arglists (quote ([flag alt-flag meta10515])), :name cljs.core.async/->t10514, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async/t10514, :variadic false, :max-fixed-arity 3}), :column 5, :protocol-inline nil, :variadic false, :line 123, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10520 {:column 3, :line 131, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core.async.impl.protocols/Handler}, :num-fields 4, :type true, :name cljs.core.async/t10520}, t11729 {:column 11, :line 526, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core/IWithMeta cljs.core.async/Mux}, :num-fields 11, :type true, :name cljs.core.async/t11729}, buffer {:arglists (quote ([n])), :name cljs.core.async/buffer, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.buffers/FixedBuffer, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a fixed buffer of size n. When full, puts will block/park.", :line 17, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, sub {:arglists (quote ([p topic ch] [p topic ch close?])), :name cljs.core.async/sub, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3} {:tag #{nil any}, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :line 645, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, pipe {:arglists (quote ([from to] [from to close?])), :name cljs.core.async/pipe, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes elements from the from channel and supplies them to the to\n  channel. By default, the to channel will be closed when the\n  from channel closes, but can be determined by the close?\n  parameter.", :line 328, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, close! {:arglists (quote ([port])), :name cljs.core.async/close!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 102, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10523 {:column 3, :line 131, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core.async.impl.protocols/Handler}, :num-fields 4, :type true, :name cljs.core.async/t10523}, muxch* {:arglists (quote ([_])), :protocol cljs.core.async/Mux, :name cljs.core.async/muxch*, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 404, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, unsub-all* {:arglists (quote ([p] [p v])), :protocol cljs.core.async/Pub, :name cljs.core.async/unsub-all*, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1} {:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 583, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10517 {:column 5, :line 123, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core.async.impl.protocols/Handler}, :num-fields 3, :type true, :name cljs.core.async/t10517}, mix {:arglists (quote ([out])), :name cljs.core.async/mix, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async/t11838, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n", :line 481, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, map {:arglists (quote ([f chs] [f chs buf-or-n])), :name cljs.core.async/map, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied", :line 666, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, filter> {:arglists (quote ([p ch])), :name cljs.core.async/filter>, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async/t10554, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns true to the\n  target channel.", :line 236, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t11979 {:column 14, :line 617, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core.async/Pub cljs.core/IWithMeta cljs.core.async/Mux}, :num-fields 7, :type true, :name cljs.core.async/t11979}, Pub {:impls #{cljs.core.async/t12103 cljs.core.async/t11979}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :column 1, :line 583, :protocol-symbol true, :name cljs.core.async/Pub}, ->t11838 {:arglists (quote ([pick out attrs cs calc-state solo-modes mix changed change solo-mode meta11839])), :name cljs.core.async/->t11838, :protocol-impl nil, :max-fixed-arity 11, :methods ({:tag cljs.core.async/t11838, :variadic false, :max-fixed-arity 11}), :column 11, :protocol-inline nil, :variadic false, :line 526, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, alt-flag {:arglists (quote ([])), :name cljs.core.async/alt-flag, :protocol-impl nil, :max-fixed-arity 0, :methods ({:tag cljs.core.async/t10517, :variadic false, :max-fixed-arity 0}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 121, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, take! {:arglists (quote ([port fn1] [port fn1 on-caller?])), :name cljs.core.async/take!, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2} {:tag clj-nil, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Asynchronously takes a val from port, passing to fn1. Will pass nil\n   if closed. If on-caller? (default true) is true, and value is\n   immediately available, will call fn1 on calling thread.\n   Returns nil.", :line 64, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, filter< {:arglists (quote ([p ch] [p ch buf-or-n])), :name cljs.core.async/filter<, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns true. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :line 261, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, solo-mode* {:arglists (quote ([m mode])), :protocol cljs.core.async/Mix, :name cljs.core.async/solo-mode*, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 474, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, unmix-all* {:arglists (quote ([m])), :protocol cljs.core.async/Mix, :name cljs.core.async/unmix-all*, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :line 474, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, fn-handler {:arglists (quote ([f])), :name cljs.core.async/fn-handler, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async/t10504, :variadic false, :max-fixed-arity 1}), :column 1, :private true, :protocol-inline nil, :variadic false, :line 11, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10554 {:arglists (quote ([ch p filter> meta10555])), :name cljs.core.async/->t10554, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async/t10554, :variadic false, :max-fixed-arity 4}), :column 3, :protocol-inline nil, :variadic false, :line 241, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, timeout {:arglists (quote ([msecs])), :name cljs.core.async/timeout, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil cljs.core.async.impl.channels/ManyToManyChannel clj-nil}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a channel that will close after msecs", :line 53, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, into {:arglists (quote ([coll ch])), :name cljs.core.async/into, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result.", :line 720, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, map< {:arglists (quote ([f ch])), :name cljs.core.async/map<, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async/t10539, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a function and a source channel, and returns a channel which\n  contains the values produced by applying f to each value taken from\n  the source channel", :line 192, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10523 {:arglists (quote ([cb flag alt-handler meta10524])), :name cljs.core.async/->t10523, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async/t10523, :variadic false, :max-fixed-arity 4}), :column 3, :protocol-inline nil, :variadic false, :line 131, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t11838 {:column 11, :line 526, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core/IWithMeta cljs.core.async/Mux}, :num-fields 11, :type true, :name cljs.core.async/t11838}, t10533 {:column 3, :line 197, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core.async.impl.protocols/Channel cljs.core/IMeta cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IWithMeta}, :num-fields 4, :type true, :name cljs.core.async/t10533}, map> {:arglists (quote ([f ch])), :name cljs.core.async/map>, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async/t10548, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value before supplying it to the target channel.", :line 219, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t11226 {:column 11, :line 426, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core.async/Mult cljs.core/IWithMeta cljs.core.async/Mux}, :num-fields 4, :type true, :name cljs.core.async/t11226}, ->t10551 {:arglists (quote ([ch p filter> meta10552])), :name cljs.core.async/->t10551, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async/t10551, :variadic false, :max-fixed-arity 4}), :column 3, :protocol-inline nil, :variadic false, :line 241, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10520 {:arglists (quote ([cb flag alt-handler meta10521])), :name cljs.core.async/->t10520, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async/t10520, :variadic false, :max-fixed-arity 4}), :column 3, :protocol-inline nil, :variadic false, :line 131, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, reduce {:arglists (quote ([f init ch])), :name cljs.core.async/reduce, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result.", :line 364, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, Mix {:impls #{cljs.core.async/t11729 cljs.core.async/t11838}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :column 1, :line 474, :protocol-symbol true, :name cljs.core.async/Mix}, unsub-all {:arglists (quote ([p] [p topic])), :name cljs.core.async/unsub-all, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1} {:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Unsubscribes all channels from a pub, or a topic of a pub", :line 658, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t12103 {:arglists (quote ([ensure-mult mults buf-fn topic-fn ch pub meta12104])), :name cljs.core.async/->t12103, :protocol-impl nil, :max-fixed-arity 7, :methods ({:tag cljs.core.async/t12103, :variadic false, :max-fixed-arity 7}), :column 14, :protocol-inline nil, :variadic false, :line 617, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, unmix* {:arglists (quote ([m ch])), :protocol cljs.core.async/Mix, :name cljs.core.async/unmix*, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 474, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, tap* {:arglists (quote ([m ch close?])), :protocol cljs.core.async/Mult, :name cljs.core.async/tap*, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 407, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, Mux {:impls #{cljs.core.async/t11729 cljs.core.async/t11838 cljs.core.async/t12103 cljs.core.async/t11449 cljs.core.async/t11979 cljs.core.async/t11226}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :column 1, :line 404, :protocol-symbol true, :name cljs.core.async/Mux}, mult {:arglists (quote ([ch])), :name cljs.core.async/mult, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async/t11449, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap put throws an exception, it will be removed from the mult.", :line 412, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, untap-all {:arglists (quote ([mult])), :name cljs.core.async/untap-all, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Disconnects all target channels from a mult", :line 470, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, to-chan {:arglists (quote ([coll])), :name cljs.core.async/to-chan, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted.", :line 395, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10539 {:arglists (quote ([ch f map< meta10540])), :name cljs.core.async/->t10539, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async/t10539, :variadic false, :max-fixed-arity 4}), :column 3, :protocol-inline nil, :variadic false, :line 197, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, admix {:arglists (quote ([mix ch])), :name cljs.core.async/admix, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Adds ch as an input to the mix", :line 550, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, sliding-buffer {:arglists (quote ([n])), :name cljs.core.async/sliding-buffer, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.buffers/SlidingBuffer, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a buffer of size n. When full, puts will complete, and be\n  buffered, but oldest elements in buffer will be dropped (not\n  transferred).", :line 28, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t12103 {:column 14, :line 617, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core.async/Pub cljs.core/IWithMeta cljs.core.async/Mux}, :num-fields 7, :type true, :name cljs.core.async/t12103}, t10536 {:column 10, :line 205, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core.async.impl.protocols/Handler}, :num-fields 7, :type true, :name cljs.core.async/t10536}, <! {:arglists (quote ([port])), :name cljs.core.async/<!, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.", :line 58, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, toggle* {:arglists (quote ([m state-map])), :protocol cljs.core.async/Mix, :name cljs.core.async/toggle*, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 474, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, do-alts {:arglists (quote ([fret ports opts])), :name cljs.core.async/do-alts, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{cljs.core.async.impl.channels/t6126 clj-nil}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "returns derefable [val port] if immediate, nil if enqueued", :line 138, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t10536 {:arglists (quote ([fn1 _ meta10534 ch f map< meta10537])), :name cljs.core.async/->t10536, :protocol-impl nil, :max-fixed-arity 7, :methods ({:tag cljs.core.async/t10536, :variadic false, :max-fixed-arity 7}), :column 10, :protocol-inline nil, :variadic false, :line 205, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10542 {:column 10, :line 205, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core.async.impl.protocols/Handler}, :num-fields 7, :type true, :name cljs.core.async/t10542}, untap {:arglists (quote ([mult ch])), :name cljs.core.async/untap, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Disconnects a target channel from a mult", :line 465, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, partition {:arglists (quote ([n ch] [n ch buf-or-n])), :name cljs.core.async/partition, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a channel that will contain vectors of n items taken from ch. The\n   final vector in the return channel may be smaller than n if ch closed before\n   the vector could be completely filled.\n\n   The output channel is unbuffered by default, unless buf-or-n is given", :line 767, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, untap* {:arglists (quote ([m ch])), :protocol cljs.core.async/Mult, :name cljs.core.async/untap*, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :line 407, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, sub* {:arglists (quote ([p v ch close?])), :protocol cljs.core.async/Pub, :name cljs.core.async/sub*, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 4}), :column 1, :protocol-inline nil, :variadic false, :line 583, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, unblocking-buffer? {:arglists (quote ([buff])), :name cljs.core.async/unblocking-buffer?, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns true if a channel created with buff will never block. That is to say,\n   puts into this buffer will never cause the buffer to be full. ", :line 35, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10501 {:column 3, :line 12, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core.async.impl.protocols/Handler}, :num-fields 3, :type true, :name cljs.core.async/t10501}, toggle {:arglists (quote ([mix state-map])), :name cljs.core.async/toggle, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Atomically sets the state(s) of one or more channels in a mix. The\n  state map is a map of channels -> channel-state-map. A\n  channel-state-map is a map of attrs -> boolean, where attr is one or\n  more of :mute, :pause or :solo. Any states supplied are merged with\n  the current state.\n\n  Note that channels can be added to a mix via toggle, which can be\n  used to add channels in a particular (e.g. paused) state.", :line 565, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10545 {:column 3, :line 223, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core.async.impl.protocols/Channel cljs.core/IMeta cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IWithMeta}, :num-fields 4, :type true, :name cljs.core.async/t10545}, unsub* {:arglists (quote ([p v ch])), :protocol cljs.core.async/Pub, :name cljs.core.async/unsub*, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :line 583, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, mapcat< {:arglists (quote ([f in] [f in buf-or-n])), :name cljs.core.async/mapcat<, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a function and a source channel, and returns a channel which\n  contains the values in each collection produced by applying f to\n  each value taken from the source channel. f must return a\n  collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The channel will close when the source channel\n  closes.", :line 298, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10539 {:column 3, :line 197, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core.async.impl.protocols/Channel cljs.core/IMeta cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IWithMeta}, :num-fields 4, :type true, :name cljs.core.async/t10539}, solo-mode {:arglists (quote ([mix mode])), :name cljs.core.async/solo-mode, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause", :line 577, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10504 {:column 3, :line 12, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core/IMeta cljs.core/IWithMeta cljs.core.async.impl.protocols/Handler}, :num-fields 3, :type true, :name cljs.core.async/t10504}, unique {:arglists (quote ([ch] [ch buf-or-n])), :name cljs.core.async/unique, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a channel that will contain values from ch. Consecutive duplicate\n   values will be dropped.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :line 747, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10548 {:column 3, :line 223, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core.async.impl.protocols/Channel cljs.core/IMeta cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IWithMeta}, :num-fields 4, :type true, :name cljs.core.async/t10548}, take {:arglists (quote ([n ch] [n ch buf-or-n])), :name cljs.core.async/take, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :line 728, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, Mult {:impls #{cljs.core.async/t11449 cljs.core.async/t11226}, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :column 1, :line 407, :protocol-symbol true, :name cljs.core.async/Mult}, remove> {:arglists (quote ([p ch])), :name cljs.core.async/remove>, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async/t10554, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns false to the\n  target channel.", :line 254, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, unsub {:arglists (quote ([p topic ch])), :name cljs.core.async/unsub, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Unsubscribes a channel from a topic of a pub", :line 653, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, t10551 {:column 3, :line 241, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs", :protocols #{cljs.core.async.impl.protocols/Channel cljs.core/IMeta cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IWithMeta}, :num-fields 4, :type true, :name cljs.core.async/t10551}, ->t10533 {:arglists (quote ([ch f map< meta10534])), :name cljs.core.async/->t10533, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async/t10533, :variadic false, :max-fixed-arity 4}), :column 3, :protocol-inline nil, :variadic false, :line 197, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t11226 {:arglists (quote ([cs ch mult meta11227])), :name cljs.core.async/->t11226, :protocol-impl nil, :max-fixed-arity 4, :methods ({:tag cljs.core.async/t11226, :variadic false, :max-fixed-arity 4}), :column 11, :protocol-inline nil, :variadic false, :line 426, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, mapcat> {:arglists (quote ([f out] [f out buf-or-n])), :name cljs.core.async/mapcat>, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value put, then supplies each element of the result\n  to the target channel. f must return a collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The target channel will be closed when the source\n  channel closes.", :line 313, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, chan {:arglists (quote ([] [buf-or-n])), :name cljs.core.async/chan, :protocol-impl nil, :max-fixed-arity 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 0} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :column 1, :protocol-inline nil, :variadic false, :doc "Creates a channel with an optional buffer. If buf-or-n is a number,\n  will create and use a fixed buffer of that size.", :line 41, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, merge {:arglists (quote ([chs] [chs buf-or-n])), :name cljs.core.async/merge, :protocol-impl nil, :max-fixed-arity 2, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a collection of source channels and returns a channel which\n  contains all values taken from them. The returned channel will be\n  unbuffered by default, or a buf-or-n can be supplied. The channel\n  will close after all the source channels have closed.", :line 702, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, remove< {:arglists (quote ([p ch] [p ch buf-or-n])), :name cljs.core.async/remove<, :protocol-impl nil, :max-fixed-arity 3, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :column 1, :protocol-inline nil, :variadic false, :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns false. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :line 279, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}, ->t11979 {:arglists (quote ([ensure-mult mults buf-fn topic-fn ch pub meta11980])), :name cljs.core.async/->t11979, :protocol-impl nil, :max-fixed-arity 7, :methods ({:tag cljs.core.async/t11979, :variadic false, :max-fixed-arity 7}), :column 14, :protocol-inline nil, :variadic false, :line 617, :fn-var true, :file "/home/gary/dev/personal/quewww/target/cljsbuild-compiler-0/cljs/core/async.cljs"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :excludes #{partition-by map into reduce partition take merge}, :imports nil, :doc nil, :uses nil}}, :cljs.analyzer/constant-table {:dup constant$keyword$4, :in constant$keyword$33, :finished constant$keyword$17, :entities constant$keyword$64, :descendants constant$keyword$14, :last constant$keyword$57, :default constant$keyword$7, :recur constant$keyword$18, :text constant$keyword$49, :data constant$keyword$52, :finally-block constant$keyword$21, :media_url constant$keyword$66, :ws constant$keyword$35, :catch-block constant$keyword$19, :react-key constant$keyword$42, :mutes constant$keyword$29, :args constant$keyword$56, :om.core/index constant$keyword$43, :connection constant$keyword$76, :solo constant$keyword$27, :key constant$keyword$44, :ns constant$keyword$54, :method constant$keyword$50, :keywordize-keys constant$keyword$12, :dismiss constant$keyword$71, :mtgox constant$keyword$48, :parents constant$keyword$13, :flush-on-newline constant$keyword$1, :click constant$keyword$39, :hierarchy constant$keyword$59, :catch-exception constant$keyword$20, :internal constant$keyword$74, :continue-block constant$keyword$22, :urls constant$keyword$63, :prev constant$keyword$23, :media constant$keyword$67, :title constant$keyword$36, :uri constant$keyword$34, :cljs.core.async/nothing constant$keyword$31, :ancestors constant$keyword$15, :media_url_https constant$keyword$65, :expanded_url constant$keyword$62, :tweets-loop constant$keyword$77, :url constant$keyword$51, :done constant$keyword$10, :print-length constant$keyword$5, :pop constant$keyword$72, :reads constant$keyword$30, :result constant$keyword$58, :type constant$keyword$37, :else constant$keyword$6, :cljs.core/not-found constant$keyword$8, :readably constant$keyword$2, :list constant$keyword$69, :validator constant$keyword$9, :meta constant$keyword$3, :index constant$keyword$40, :the-var constant$keyword$55, :pause constant$keyword$25, :format constant$keyword$73, :post constant$keyword$53, :opts constant$keyword$45, :solos constant$keyword$28, :label constant$keyword$38, :om.core/root constant$keyword$41, :price constant$keyword$47, :sendTweet constant$keyword$70, :out constant$keyword$32, :tweets constant$keyword$68, :fn constant$keyword$46, :q constant$keyword$60, :async constant$keyword$75, :value constant$keyword$11, :tweet constant$keyword$61, :tag constant$keyword$16, :mute constant$keyword$26, :priority constant$keyword$24}}
